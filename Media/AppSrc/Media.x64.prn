Compiling Program: C:\DataFlex Projects\Media\AppSrc\Media.src
Memory Available: 9219231744
1>Use DFAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.x64.pkd    (C:\Program Files\DataFlex 20.1\Pkg\dfallent.x64.pkd)
73081>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJStandardCommandBarSystem.pkg)
73081>>>// these are all the packages used in a standard MDI menubar/toolbar system
73081>>>
73081>>>Use cCJCommandBarSystem.pkg
73081>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJStandardMenuItemClasses.pkg)
73081>>>>>Use Dfpanel.pkg
73081>>>>>Use cCJCommandBarSystem.pkg
73081>>>>>Use LanguageText.pkg
73081>>>>>
73081>>>>>
73081>>>>>Class cCJUndoMenuItem is a cCJMenuItem
73082>>>>>    
73082>>>>>    Procedure Construct_Object
73084>>>>>        Forward Send Construct_Object
73086>>>>>        Set psCaption   to C_$CaptionUndo
73087>>>>>        Set psToolTip to C_$ToolTipUndo
73088>>>>>        Set psDescription to C_$DescUndo
73089>>>>>        Set psImage to "ActionUndo.ico"
73090>>>>>        Set pbActiveUpdate to True
73091>>>>>        Set psCategory to C_$CategoryEdit
73092>>>>>        Set psShortcut to C_$Key_Ctrl_Z
73093>>>>>    End_Procedure
73094>>>>>    
73094>>>>>    Procedure OnExecute Variant vCommandBarControl
73096>>>>>        Send Undo of (focus(Self))
73097>>>>>    End_Procedure
73098>>>>>    
73098>>>>>    Function IsEnabled Returns Boolean
73100>>>>>        Boolean bEnabled
73100>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
73101>>>>>        Function_Return bEnabled
73102>>>>>    End_Function
73103>>>>>    
73103>>>>>End_Class
73104>>>>>
73104>>>>>
73104>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
73105>>>>>    
73105>>>>>    Procedure Construct_Object
73107>>>>>        Forward Send Construct_Object
73109>>>>>        Set psCaption   to C_$CaptionDelete
73110>>>>>        Set psToolTip to C_$ToolTipDelete
73111>>>>>        Set psDescription to C_$DescDelete
73112>>>>>        Set psImage to "actionDelete.ico"
73113>>>>>        Set psShortcut to C_$Key_Delete
73114>>>>>        Set pbActiveUpdate to True
73115>>>>>        Set psCategory to C_$CategoryEdit
73116>>>>>    End_Procedure
73117>>>>>    
73117>>>>>    
73117>>>>>    Procedure OnExecute Variant vCommandBarControl
73119>>>>>        Send Delete of (focus(Self))
73120>>>>>    End_Procedure
73121>>>>>    
73121>>>>>    Function IsEnabled Returns Boolean
73123>>>>>        Boolean bEnabled
73123>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
73124>>>>>        Function_Return bEnabled
73125>>>>>    End_Function
73126>>>>>    
73126>>>>>End_Class
73127>>>>>
73127>>>>>
73127>>>>>Class cCJCutMenuItem is a cCJMenuItem
73128>>>>>    
73128>>>>>    Procedure Construct_Object
73130>>>>>        Forward Send Construct_Object
73132>>>>>        Set psCaption   to C_$CaptionCut
73133>>>>>        Set psToolTip to C_$TooltipCut
73134>>>>>        Set psDescription to C_$DescCut
73135>>>>>        Set psImage to "actionCut.ico"
73136>>>>>        Set psShortcut to C_$Key_Ctrl_X
73137>>>>>        Set pbActiveUpdate to True
73138>>>>>        Set psCategory to C_$CategoryEdit
73139>>>>>    End_Procedure
73140>>>>>    
73140>>>>>    
73140>>>>>    Procedure OnExecute Variant vCommandBarControl
73142>>>>>        Send Cut of (focus(Self))
73143>>>>>    End_Procedure
73144>>>>>    
73144>>>>>    Function IsEnabled Returns Boolean
73146>>>>>        Boolean bEnabled
73146>>>>>        Get CanCut of (Focus(Self)) to bEnabled
73147>>>>>        Function_Return bEnabled
73148>>>>>    End_Function
73149>>>>>    
73149>>>>>End_Class
73150>>>>>
73150>>>>>
73150>>>>>Class cCJCopyMenuItem is a cCJMenuItem
73151>>>>>    
73151>>>>>    Procedure Construct_Object
73153>>>>>        Forward Send Construct_Object
73155>>>>>        Set psCaption   to C_$CaptionCopy
73156>>>>>        Set psToolTip to C_$ToolTipCopy
73157>>>>>        Set psDescription to C_$DescCopy
73158>>>>>        Set psImage to "actionCopy.ico"
73159>>>>>        Set psShortcut to C_$Key_Ctrl_C
73160>>>>>        Set pbActiveUpdate to True
73161>>>>>        Set psCategory to C_$CategoryEdit
73162>>>>>    End_Procedure
73163>>>>>    
73163>>>>>    
73163>>>>>    Procedure OnExecute Variant vCommandBarControl
73165>>>>>        Send Copy of (focus(Self))
73166>>>>>    End_Procedure
73167>>>>>    
73167>>>>>    Function IsEnabled Returns Boolean
73169>>>>>        Boolean bEnabled
73169>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
73170>>>>>        Function_Return bEnabled
73171>>>>>    End_Function
73172>>>>>    
73172>>>>>End_Class
73173>>>>>
73173>>>>>
73173>>>>>Class cCJPasteMenuItem is a cCJMenuItem
73174>>>>>    
73174>>>>>    Procedure Construct_Object
73176>>>>>        Forward Send Construct_Object
73178>>>>>        Set psCaption   to C_$CaptionPaste
73179>>>>>        Set psToolTip to C_$ToolTipPaste
73180>>>>>        Set psDescription to C_$DescPaste
73181>>>>>        Set psImage to "actionPaste.ico"
73182>>>>>        Set pbActiveUpdate to True
73183>>>>>        Set psShortcut to C_$Key_Ctrl_V
73184>>>>>        Set psCategory to C_$CategoryEdit
73185>>>>>    End_Procedure
73186>>>>>    
73186>>>>>    
73186>>>>>    Procedure OnExecute Variant vCommandBarControl
73188>>>>>        Send Paste of (focus(Self))
73189>>>>>    End_Procedure
73190>>>>>    
73190>>>>>    Function IsEnabled Returns Boolean
73192>>>>>        Boolean bEnabled
73192>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
73193>>>>>        Function_Return bEnabled
73194>>>>>    End_Function
73195>>>>>    
73195>>>>>End_Class
73196>>>>>
73196>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
73197>>>>>    
73197>>>>>    Procedure Construct_Object
73199>>>>>        Forward Send Construct_Object
73201>>>>>        Set psCaption   to C_$CaptionSelectAll
73202>>>>>        Set psToolTip to C_$ToolTipSelectAll
73203>>>>>        Set psDescription to C_$DescSelectAll
73204>>>>>        Set pbActiveUpdate to True
73205>>>>>        Set psShortcut to C_$Key_Ctrl_A
73206>>>>>        Set psCategory to C_$CategoryEdit
73207>>>>>    End_Procedure
73208>>>>>    
73208>>>>>    
73208>>>>>    Procedure OnExecute Variant vCommandBarControl
73210>>>>>        Send Select_All of (focus(Self))
73211>>>>>    End_Procedure
73212>>>>>    
73212>>>>>    Function IsEnabled Returns Boolean
73214>>>>>        Boolean bEnabled
73214>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
73215>>>>>        Function_Return bEnabled
73216>>>>>    End_Function
73217>>>>>    
73217>>>>>End_Class
73218>>>>>
73218>>>>>
73218>>>>>Class cCJExitMenuItem is a cCJMenuItem
73219>>>>>    
73219>>>>>    Procedure Construct_Object
73221>>>>>        Forward Send Construct_Object
73223>>>>>        Set psCaption to C_$CaptionExit
73224>>>>>        Set psToolTip to C_$ToolTipExit
73225>>>>>        Set psDescription to C_$ToolTipExit
73226>>>>>        Set psShortcut to C_$Key_Alt_F4
73227>>>>>        Set psCategory to C_$CategoryFile
73228>>>>>    End_Procedure
73229>>>>>    
73229>>>>>    Procedure OnExecute Variant vCommandBarControl
73231>>>>>        Send Exit_Application of Desktop
73232>>>>>    End_Procedure
73233>>>>>    
73233>>>>>End_Class
73234>>>>>
73234>>>>>Class cCJHelpMenuItem is a cCJMenuItem
73235>>>>>    
73235>>>>>    Procedure Construct_Object
73237>>>>>        Forward Send Construct_Object
73239>>>>>        Set psCaption to C_$CaptionHelp
73240>>>>>        Set psDescription to C_$ToolTipHelp
73241>>>>>        Set psToolTip to C_$DescHelp
73242>>>>>        Set psImage to "ActionHelp.ico"
73243>>>>>        Set psShortcut to "F1"
73244>>>>>        Set psCategory to C_$CategoryHelp
73245>>>>>    End_Procedure
73246>>>>>    
73246>>>>>    Procedure OnExecute Variant vCommandBarControl
73248>>>>>        Send Help of (Focus(Self))
73249>>>>>    End_Procedure
73250>>>>>    
73250>>>>>End_Class
73251>>>>>
73251>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
73252>>>>>    
73252>>>>>    Procedure Construct_Object
73254>>>>>        Forward Send Construct_Object
73256>>>>>        Set psCaption to C_$CaptionAddStatusbar
73257>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
73258>>>>>        Set psDescription to  C_$DescAddStatusbar
73259>>>>>        Set psCategory to C_$CategoryWindow
73260>>>>>    End_Procedure
73261>>>>>    
73261>>>>>    Procedure OnExecute Variant vCommandBarControl
73263>>>>>        Handle hoCommandBars hoClientArea
73263>>>>>        Get CommandBarSystemObject to hoCommandBars
73264>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73265>>>>>        If hoClientArea Begin
73267>>>>>            // the clientarea's parent panel has message
73267>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
73268>>>>>        End
73268>>>>>>
73268>>>>>    End_Procedure
73269>>>>>    
73269>>>>>    Function IsChecked Returns Boolean
73271>>>>>        Boolean bOn
73271>>>>>        Handle hoCommandBars hoClientArea
73271>>>>>        Get CommandBarSystemObject to hoCommandBars
73272>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73273>>>>>        If hoClientArea Begin
73275>>>>>            // the clientarea's parent panel has message
73275>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
73276>>>>>        End
73276>>>>>>
73276>>>>>        Function_Return bOn
73277>>>>>    End_Function
73278>>>>>End_Class
73279>>>>>
73279>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
73280>>>>>    
73280>>>>>    Procedure Construct_Object
73282>>>>>        Forward Send Construct_Object
73284>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
73285>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
73286>>>>>        Set psDescription to C_$DescAutoArrangeIcons
73287>>>>>        Set psCategory to C_$CategoryWindow
73288>>>>>    End_Procedure
73289>>>>>    
73289>>>>>    Procedure OnExecute Variant vCommandBarControl
73291>>>>>        Handle hoCommandBars hoClientArea
73291>>>>>        Get CommandBarSystemObject to hoCommandBars
73292>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73293>>>>>        If hoClientArea Begin
73295>>>>>            // the clientarea's parent panel has message
73295>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
73296>>>>>        End
73296>>>>>>
73296>>>>>    End_Procedure
73297>>>>>    
73297>>>>>    Function IsChecked Returns Boolean
73299>>>>>        Boolean bOn
73299>>>>>        Handle hoCommandBars hoClientArea
73299>>>>>        Get CommandBarSystemObject to hoCommandBars
73300>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73301>>>>>        If hoClientArea Begin
73303>>>>>            // the clientarea's parent panel has message
73303>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
73304>>>>>        End
73304>>>>>>
73304>>>>>        Function_Return bOn
73305>>>>>    End_Function
73306>>>>>End_Class
73307>>>>>
73307>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
73308>>>>>    
73308>>>>>    Procedure Construct_Object
73310>>>>>        Forward Send Construct_Object
73312>>>>>        Set psCaption to C_$CaptionRestoreMenus
73313>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
73314>>>>>        Set psDescription to C_$DescRestoreMenus
73315>>>>>        Set psCategory to C_$CategoryWindow
73316>>>>>    End_Procedure
73317>>>>>    
73317>>>>>    Procedure OnExecute Variant vCommandBarControl
73319>>>>>        Handle hoCommandBars
73319>>>>>        Get CommandBarSystemObject to hoCommandBars
73320>>>>>        Send RestoreLayout of hoCommandBars
73321>>>>>    End_Procedure
73322>>>>>    
73322>>>>>End_Class
73323>>>>>
73323>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
73324>>>>>    
73324>>>>>    Procedure Construct_Object
73326>>>>>        Forward Send Construct_Object
73328>>>>>        Set psCaption to C_$CaptionCascade
73329>>>>>        Set psToolTip to C_$ToolTipCascade
73330>>>>>        Set psDescription to  C_$DescCascade
73331>>>>>        Set psImage to "ActionCascade.ico"
73332>>>>>        Set psCategory to C_$CategoryWindow
73333>>>>>    End_Procedure
73334>>>>>    
73334>>>>>    Procedure OnExecute Variant vCommandBarControl
73336>>>>>        Handle hoCommandBars hoClientArea
73336>>>>>        Get CommandBarSystemObject to hoCommandBars
73337>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73338>>>>>        If hoClientArea Begin
73340>>>>>            Send Cascade_Windows of hoClientArea
73341>>>>>        End
73341>>>>>>
73341>>>>>    End_Procedure
73342>>>>>End_Class
73343>>>>>
73343>>>>>Class cCJTileHorizontally is a cCJMenuItem
73344>>>>>    
73344>>>>>    Procedure Construct_Object
73346>>>>>        Forward Send Construct_Object
73348>>>>>        Set psCaption to C_$CaptionTileHorizontally
73349>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
73350>>>>>        Set psDescription to  C_$DescTileHorizontally
73351>>>>>        Set psImage to "ActionTileHorizontally.ico"
73352>>>>>        Set psCategory to C_$CategoryWindow
73353>>>>>    End_Procedure
73354>>>>>    
73354>>>>>    Procedure OnExecute Variant vCommandBarControl
73356>>>>>        Handle hoCommandBars hoClientArea
73356>>>>>        Get CommandBarSystemObject to hoCommandBars
73357>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73358>>>>>        If hoClientArea Begin
73360>>>>>            Send Tile_Windows_Horizontal of hoClientArea
73361>>>>>        End
73361>>>>>>
73361>>>>>    End_Procedure
73362>>>>>End_Class
73363>>>>>
73363>>>>>Class cCJTileVertically is a cCJMenuItem
73364>>>>>    
73364>>>>>    Procedure Construct_Object
73366>>>>>        Forward Send Construct_Object
73368>>>>>        Set psCaption to C_$CaptionTileVertically
73369>>>>>        Set psToolTip to C_$ToolTipTileVertically
73370>>>>>        Set psDescription to  C_$DescTileVertically
73371>>>>>        Set psImage to "ActionTileVertically.ico"
73372>>>>>        Set psCategory to C_$CategoryWindow
73373>>>>>    End_Procedure
73374>>>>>    
73374>>>>>    Procedure OnExecute Variant vCommandBarControl
73376>>>>>        Handle hoCommandBars hoClientArea
73376>>>>>        Get CommandBarSystemObject to hoCommandBars
73377>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73378>>>>>        If hoClientArea Begin
73380>>>>>            Send Tile_Windows_Vertical of hoClientArea
73381>>>>>        End
73381>>>>>>
73381>>>>>    End_Procedure
73382>>>>>End_Class
73383>>>>>
73383>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
73384>>>>>    
73384>>>>>    Procedure Construct_Object
73386>>>>>        Forward Send Construct_Object
73388>>>>>        Set psCaption to C_$CaptionMinimizeWindows
73389>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
73390>>>>>        Set psDescription to  C_$DescMinimizeWindows
73391>>>>>        Set psCategory to C_$CategoryWindow
73392>>>>>    End_Procedure
73393>>>>>    
73393>>>>>    Procedure OnExecute Variant vCommandBarControl
73395>>>>>        Handle hoCommandBars hoClientArea
73395>>>>>        Get CommandBarSystemObject to hoCommandBars
73396>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73397>>>>>        If hoClientArea Begin
73399>>>>>            // the clientarea's parent panel has message
73399>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
73400>>>>>        End
73400>>>>>>
73400>>>>>    End_Procedure
73401>>>>>End_Class
73402>>>>>
73402>>>>>
73402>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
73403>>>>>    
73403>>>>>    Procedure Construct_Object
73405>>>>>        Forward Send Construct_Object
73407>>>>>        Set psCaption to C_$CaptionRestoreWindows
73408>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
73409>>>>>        Set psDescription to  C_$DescRestoreWindows
73410>>>>>        Set psCategory to C_$CategoryWindow
73411>>>>>    End_Procedure
73412>>>>>    
73412>>>>>    Procedure OnExecute Variant vCommandBarControl
73414>>>>>        Handle hoCommandBars hoClientArea
73414>>>>>        Get CommandBarSystemObject to hoCommandBars
73415>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73416>>>>>        If hoClientArea Begin
73418>>>>>            // the clientarea's parent panel has message
73418>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
73419>>>>>        End
73419>>>>>>
73419>>>>>    End_Procedure
73420>>>>>End_Class
73421>>>>>
73421>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
73422>>>>>    
73422>>>>>    Procedure Construct_Object
73424>>>>>        Forward Send Construct_Object
73426>>>>>        Set psCaption to C_$CaptionArrangeIcons
73427>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
73428>>>>>        Set psDescription to  C_$DescArrangeIcons
73429>>>>>        Set psCategory to C_$CategoryWindow
73430>>>>>    End_Procedure
73431>>>>>    
73431>>>>>    Procedure OnExecute Variant vCommandBarControl
73433>>>>>        Handle hoCommandBars hoClientArea
73433>>>>>        Get CommandBarSystemObject to hoCommandBars
73434>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73435>>>>>        If hoClientArea Begin
73437>>>>>            Send Arrange_Icons of hoClientArea
73438>>>>>        End
73438>>>>>>
73438>>>>>    End_Procedure
73439>>>>>    
73439>>>>>End_Class
73440>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJAboutMenuItem.pkg)
73440>>>>>Use cCJCommandBarSystem.pkg
73440>>>>>Use LanguageText.pkg
73440>>>>>
73440>>>>>// It is expected that if you use this class that you provide an about object that is
73440>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
73440>>>>>// because you may wish to create your own custom about package.
73440>>>>>
73440>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
73441>>>>>
73441>>>>>    Procedure Construct_Object
73443>>>>>        Forward Send Construct_Object
73445>>>>>        Set psCaption to C_$CaptionAbout
73446>>>>>        Set psDescription to C_$ToolTipAbout
73447>>>>>        Set psToolTip to C_$DescAbout
73448>>>>>        Set psImage to "ActionAbout.ico"
73449>>>>>        Set psCategory to C_$CategoryHelp
73450>>>>>    End_Procedure
73451>>>>>    
73451>>>>>    Procedure OnExecute Variant vCommandBarControl
73453>>>>>        Handle hoCommandBars hoClientArea
73453>>>>>        Get CommandBarSystemObject to hoCommandBars
73454>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73455>>>>>        If hoClientArea Begin
73457>>>>>            Send Activate_About of hoClientArea
73458>>>>>        End
73458>>>>>>
73458>>>>>    End_Procedure
73459>>>>>
73459>>>>>End_Class
73460>>>>>
73460>>>>>
73460>>>Use cCJDeoMenuItemClasses.pkg
73460>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJMDIWindowsMenuItem.pkg)
73460>>>>>Use cCJCommandBarSystem.pkg
73460>>>>>
73460>>>>>Register_Function Client_ID Returns Integer
73460>>>>>
73460>>>>>// only used by cCJMDIWIndowsMenuItem
73460>>>>>Class cCJMDIWindowItem is a cCJMenuItem
73461>>>>>    
73461>>>>>    Procedure Construct_Object
73463>>>>>        Forward Send Construct_Object
73465>>>>>        Property Handle phWindow 0 // object id of view
73466>>>>>        Set pbControlFlagNoMovable to True
73467>>>>>        Set pbActiveUpdate to True
73468>>>>>    End_Procedure
73469>>>>>    
73469>>>>>    Procedure OnExecute Variant vCommandBarControl
73471>>>>>        Handle hWindow
73471>>>>>        Get phWindow to hWindow
73472>>>>>        Send Activate_View of hWindow
73473>>>>>    End_Procedure
73474>>>>>    
73474>>>>>End_Class
73475>>>>>
73475>>>>>
73475>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
73476>>>>>    
73476>>>>>    Procedure Construct_Object
73478>>>>>        Forward Send Construct_Object
73480>>>>>        Property Handle[] phArrayOfWindows
73481>>>>>        Set peControlType to xtpControlPopup
73482>>>>>        Set psCategory to C_$CategoryWindow
73483>>>>>    End_Procedure
73484>>>>>    
73484>>>>>    // This adds MDI windows to the existing menu items.
73484>>>>>    // This removes any existing windows menus and always adds a new set to the end
73484>>>>>    
73484>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
73486>>>>>        Handle  hClientArea hView
73486>>>>>        String  sLabel
73486>>>>>        Integer i iWindows
73486>>>>>        Handle[] hArrayOfWindows
73487>>>>>        Variant vItem
73487>>>>>        
73487>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
73487>>>>>        // also assume that destroying an action removes all menu instances of that action
73487>>>>>        Get phArrayOfWindows to hArrayOfWindows
73488>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
73489>>>>>        For i from 0 to (iWindows-1)
73495>>>>>>
73495>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
73496>>>>>        Loop
73497>>>>>>
73497>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
73498>>>>>        
73498>>>>>        // Add all views to this menu. Create the action and add the item
73498>>>>>        Move 0 to i
73499>>>>>        Get Client_Id to hClientArea // object id of client area
73500>>>>>        If (hClientArea > 0) Begin
73502>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
73503>>>>>            While (hView <> 0)
73507>>>>>                If (Active_State(hView)) Begin
73509>>>>>                    // create the action
73509>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
73510>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
73511>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
73512>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
73513>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
73515>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
73516>>>>>                    End
73516>>>>>>
73516>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
73517>>>>>                    If (i=0) Begin
73519>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
73520>>>>>                    End
73520>>>>>>
73520>>>>>                    // Create a menu item for this action
73520>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
73521>>>>>                    Increment i
73522>>>>>                End
73522>>>>>>
73522>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
73523>>>>>            Loop
73524>>>>>>
73524>>>>>        End
73524>>>>>>
73524>>>>>        
73524>>>>>        Set phArrayOfWindows to hArrayOfWindows
73525>>>>>        
73525>>>>>    End_Procedure
73526>>>>>    
73526>>>>>End_Class
73527>
73527>Object oHtmlHelp is a cHtmlHelp
73529>End_Object
73530>
73530>Object oApplication is a cApplication
73532>    Set peHelpType to htHtmlHelp
73533>
73533>    Object oConnection is a cConnection
73535>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\LoginEncryption.pkg)
73535>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cLoginEncryption.pkg)
73535>>>>>Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCryptographerEx.pkg)
73535>>>>>>>Use VdfBase.pkg
73535>>>>>>>
73535>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 20.1\Pkg\CryptographerConstants.pkg)
73535>>>>>>>>>//   Author  : Ulbe Stellema
73535>>>>>>>>>// Algorithm classes
73535>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
73535>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
73535>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
73535>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
73535>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
73535>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
73535>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
73535>>>>>>>>>
73535>>>>>>>>>// Algorithm types
73535>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
73535>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
73535>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
73535>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
73535>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
73535>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
73535>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
73535>>>>>>>>>
73535>>>>>>>>>// Generic sub-ids
73535>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
73535>>>>>>>>>
73535>>>>>>>>>// RSA sub-ids
73535>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
73535>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
73535>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
73535>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
73535>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
73535>>>>>>>>>
73535>>>>>>>>>// DSS sub-ids
73535>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
73535>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
73535>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
73535>>>>>>>>>
73535>>>>>>>>>// DES sub_ids
73535>>>>>>>>>Define ALG_SID_DES                      for 1
73535>>>>>>>>>Define ALG_SID_3DES                     for 3
73535>>>>>>>>>Define ALG_SID_DESX                     for 4
73535>>>>>>>>>Define ALG_SID_IDEA                     for 5
73535>>>>>>>>>Define ALG_SID_CAST                     for 6
73535>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
73535>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
73535>>>>>>>>>Define ALG_SID_3DES_112                 for 9
73535>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
73535>>>>>>>>>Define ALG_SID_RC5                      for 13
73535>>>>>>>>>Define ALG_SID_AES_128                  for 14
73535>>>>>>>>>Define ALG_SID_AES_192                  for 15
73535>>>>>>>>>Define ALG_SID_AES_256                  for 16
73535>>>>>>>>>Define ALG_SID_AES                      for 17
73535>>>>>>>>>
73535>>>>>>>>>// Fortezza sub-ids
73535>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
73535>>>>>>>>>Define ALG_SID_TEK                      for 11
73535>>>>>>>>>
73535>>>>>>>>>// RC2 sub-ids
73535>>>>>>>>>Define ALG_SID_RC2                      for 2
73535>>>>>>>>>
73535>>>>>>>>>// Stream cipher sub-ids
73535>>>>>>>>>Define ALG_SID_RC4                      for 1
73535>>>>>>>>>Define ALG_SID_SEAL                     for 2
73535>>>>>>>>>
73535>>>>>>>>>// Diffie-Hellman sub-ids
73535>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
73535>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
73535>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
73535>>>>>>>>>Define ALG_SID_KEA                      for 4
73535>>>>>>>>>
73535>>>>>>>>>// Hash sub ids
73535>>>>>>>>>Define ALG_SID_MD2                      for 1
73535>>>>>>>>>Define ALG_SID_MD4                      for 2
73535>>>>>>>>>Define ALG_SID_MD5                      for 3
73535>>>>>>>>>Define ALG_SID_SHA                      for 4
73535>>>>>>>>>Define ALG_SID_SHA1                     for 4
73535>>>>>>>>>Define ALG_SID_MAC                      for 5
73535>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
73535>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
73535>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
73535>>>>>>>>>Define ALG_SID_HMAC                     for 9
73535>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
73535>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
73535>>>>>>>>>Define ALG_SID_SHA_256                  for 12
73535>>>>>>>>>Define ALG_SID_SHA_384                  for 13
73535>>>>>>>>>Define ALG_SID_SHA_512                  for 14
73535>>>>>>>>>
73535>>>>>>>>>// secure channel sub ids
73535>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
73535>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
73535>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
73535>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
73535>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
73535>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
73535>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
73535>>>>>>>>>
73535>>>>>>>>>// algorithm identifier definitions
73535>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
73535>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
73535>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
73535>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
73535>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
73535>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
73535>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
73535>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
73535>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
73535>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
73535>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
73535>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
73535>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
73535>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
73535>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
73535>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
73535>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
73535>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
73535>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
73535>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
73535>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
73535>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
73535>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
73535>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
73535>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
73535>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
73535>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
73535>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
73535>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
73535>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
73535>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
73535>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
73535>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
73535>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
73535>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
73535>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
73535>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
73535>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
73535>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
73535>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
73535>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
73535>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
73535>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
73535>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
73535>>>>>>>>>
73535>>>>>>>>>// Providers
73535>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
73535>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
73535>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
73535>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
73535>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
73535>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
73535>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
73535>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
73535>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
73535>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
73535>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
73535>>>>>>>>>
73535>>>>>>>>>// dwFlags definitions for CryptAcquireContext
73535>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
73535>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
73535>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
73535>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
73535>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
73535>>>>>>>>>
73535>>>>>>>>>// dwFlag definitions for CryptGenKey
73535>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
73535>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
73535>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
73535>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
73535>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
73535>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
73535>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
73535>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
73535>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
73535>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
73535>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
73535>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
73535>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
73535>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
73535>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
73535>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
73535>>>>>>>>>
73535>>>>>>>>>// Provider types
73535>>>>>>>>>Define PROV_RSA_FULL                    for 1
73535>>>>>>>>>Define PROV_RSA_SIG                     for 2
73535>>>>>>>>>Define PROV_DSS                         for 3
73535>>>>>>>>>Define PROV_FORTEZZA                    for 4
73535>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
73535>>>>>>>>>Define PROV_SSL                         for 6
73535>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
73535>>>>>>>>>Define PROV_DSS_DH                      for 13
73535>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
73535>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
73535>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
73535>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
73535>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
73535>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
73535>>>>>>>>>Define PROV_RNG                         for 21
73535>>>>>>>>>Define PROV_INTEL_SEC                   for 22
73535>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
73535>>>>>>>>>Define PROV_RSA_AES                     for 24
73535>>>>>>>>>
73535>>>>>>>>>// KP_MODE
73535>>>>>>>>>// KP_MODE
73535>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
73535>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
73535>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
73535>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
73535>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
73535>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
73535>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
73535>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
73535>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
73535>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
73535>>>>>>>>>
73535>>>>>>>>>// dwParam definitions for CryptGetKeyParam
73535>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
73535>>>>>>>>>Define KP_SALT                          for 2       // Salt value
73535>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
73535>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
73535>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
73535>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
73535>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
73535>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
73535>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
73535>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
73535>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
73535>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
73535>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
73535>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
73535>>>>>>>>>Define KP_Y                             for 15      // Y value
73535>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
73535>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
73535>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
73535>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
73535>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
73535>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
73535>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
73535>>>>>>>>>Define KP_RP                            for 23
73535>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
73535>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
73535>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
73535>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
73535>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
73535>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
73535>>>>>>>>>Define KP_KEYVAL                        for 30
73535>>>>>>>>>Define KP_ADMIN_PIN                     for 31
73535>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
73535>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
73535>>>>>>>>>Define KP_PREHASH                       for 34
73535>>>>>>>>>Define KP_ROUNDS                        for 35
73535>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
73535>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
73535>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
73535>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
73535>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
73535>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
73535>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
73535>>>>>>>>>
73535>>>>>>>>>// dwParam definitions for CryptGetHashParam
73535>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
73535>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
73535>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
73535>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
73535>>>>>>>>>
73535>>>>>>>>>// key BLOB types
73535>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
73535>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
73535>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
73535>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
73535>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
73535>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
73535>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
73535>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
73535>>>>>>>>>
73535>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
73535>>>>>>>>>
73535>>>>>>>>>// KP_PADDING
73535>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
73535>>>>>>>>>Define RANDOM_PADDING                   for 2
73535>>>>>>>>>Define ZERO_PADDING                     for 3
73535>>>>>>>>>
73535>>>>>>>>>//  Structure cryptimportkey
73535>>>>>>>>>Struct PUBLICKEYSTRUC
73535>>>>>>>>>    UChar    bType
73535>>>>>>>>>    UChar    bVersion
73535>>>>>>>>>    UShort   reserved
73535>>>>>>>>>    UInteger aiKeyAlg
73535>>>>>>>>>End_Struct
73535>>>>>>>>>
73535>>>>>>>>>Struct tPLAINTEXTKEYBLOB
73535>>>>>>>>>    PUBLICKEYSTRUC hdr
73535>>>>>>>>>    PUBLICKEYSTRUC hdr
73535>>>>>>>>>    UInteger       dwKeySize
73535>>>>>>>>>//    UChar[]        rgbKeyData
73535>>>>>>>>>End_Struct
73535>>>>>>>>>
73535>>>>>>>>>
73535>>>>>>>>>
73535>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
73535>>>>>>>>>Struct HMAC_INFO
73535>>>>>>>>>    UInteger HashAlgid
73535>>>>>>>>>    Pointer pbInnerString
73535>>>>>>>>>    DWord cbInnerString
73535>>>>>>>>>    Pointer pbOuterString
73535>>>>>>>>>    DWord cbOuterString
73535>>>>>>>>>End_Struct
73535>>>>>>>>>
73535>>>>>>>>>Struct BLOBHEADER
73535>>>>>>>>>    UChar   bType
73535>>>>>>>>>    UChar   bVersion
73535>>>>>>>>>    Short   reserved
73535>>>>>>>>>    Integer aiKeyAlg
73535>>>>>>>>>End_Struct
73535>>>>>>>>>
73535>>>>>>>>>Struct CryptoBlob
73535>>>>>>>>>    BLOBHEADER  header
73535>>>>>>>>>    BLOBHEADER  header
73535>>>>>>>>>    Integer     cbKeySize
73535>>>>>>>>>    UChar[32]   rgbKeyData
73535>>>>>>>>>End_Struct
73535>>>>>>>>>
73535>>>>>>>>>
73535>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
73535>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
73536>>>>>>>>>
73536>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
73536>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
73538>>>>>>>>>    
73538>>>>>>>>>    Boolean bResult
73538>>>>>>>>>    UWide   uwContainer uwProvider
73538>>>>>>>>>    UWide   uwContainer uwProvider
73538>>>>>>>>>
73538>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
73539>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
73540>>>>>>>>>    
73540>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
73541>>>>>>>>>
73541>>>>>>>>>    Function_Return bResult
73542>>>>>>>>>End_Function
73543>>>>>>>>>
73543>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
73544>>>>>>>>>
73544>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
73545>>>>>>>>>
73545>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
73546>>>>>>>>>
73546>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
73547>>>>>>>>>
73547>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
73548>>>>>>>>>
73548>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
73549>>>>>>>>>
73549>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
73550>>>>>>>>>
73550>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
73551>>>>>>>>>
73551>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
73552>>>>>>>>>    
73552>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
73553>>>>>>>>>
73553>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
73554>>>>>>>>>
73554>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
73555>>>>>>>>>
73555>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
73556>>>>>>>>>    
73556>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
73557>>>>>>>>>    
73557>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
73558>>>>>>>>>    
73558>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
73559>>>>>>>
73559>>>>>>>Class cCryptographerEx is a cObject
73560>>>>>>>    
73560>>>>>>>    Procedure Construct_Object
73562>>>>>>>        Forward Send Construct_Object
73564>>>>>>>        
73564>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
73565>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
73566>>>>>>>        Property Integer    piCipher    CALG_RC4
73567>>>>>>>        Property Integer    piHash      CALG_MD5
73568>>>>>>>        
73568>>>>>>>        // Private properties
73568>>>>>>>        Property Handle     Private_phProv
73569>>>>>>>        
73569>>>>>>>        // Block cipher properties
73569>>>>>>>        Property UChar[]    paKey
73570>>>>>>>        Property UChar[]    paIV
73571>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
73572>>>>>>>        Property Integer    piKeyType       CALG_AES_256
73573>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
73574>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
73575>>>>>>>        Property Integer    piBlockSize     16
73576>>>>>>>    End_Procedure
73577>>>>>>>    
73577>>>>>>>    
73577>>>>>>>    // Acquire key container handle
73577>>>>>>>    Function AcquireContext Returns Handle
73579>>>>>>>        Integer iProvider
73579>>>>>>>        WString wProvider
73579>>>>>>>        Handle hProv
73579>>>>>>>        Boolean bOk
73579>>>>>>>        Pointer pProv
73579>>>>>>>        
73579>>>>>>>        Move 0 to hProv
73580>>>>>>>        Get piProvider to iProvider
73581>>>>>>>        Get psProvider to wProvider
73582>>>>>>>        
73582>>>>>>>        //  Determine address to be passed as provider
73582>>>>>>>        If (Trim(wProvider) <> "") Begin
73584>>>>>>>            Move (AddressOf(wProvider)) to pProv
73585>>>>>>>        End
73585>>>>>>>>
73585>>>>>>>        Else Begin
73586>>>>>>>            Move 0 to pProv
73587>>>>>>>        End
73587>>>>>>>>
73587>>>>>>>        
73587>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
73587>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
73588>>>>>>>        If (not(bOk) or hProv = 0) Begin
73590>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
73591>>>>>>>        End
73591>>>>>>>>
73591>>>>>>>        
73591>>>>>>>        If (not(bOk) or hProv = 0) Begin
73593>>>>>>>            // Fallback to original
73593>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
73594>>>>>>>            
73594>>>>>>>            If (not(bOk) or hProv = 0) Begin
73596>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
73597>>>>>>>            End
73597>>>>>>>>
73597>>>>>>>        End
73597>>>>>>>>
73597>>>>>>>        Set Private_phProv to hProv
73598>>>>>>>        
73598>>>>>>>        Function_Return hProv
73599>>>>>>>    End_Function
73600>>>>>>>    
73600>>>>>>>    // Releases key container handle
73600>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
73602>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
73603>>>>>>>    End_Function
73604>>>>>>>    
73604>>>>>>>    // Creates hash object
73604>>>>>>>    Function CreateHash Handle hProv Returns Handle
73606>>>>>>>        Integer iAlgorithm
73606>>>>>>>        Handle hHash
73606>>>>>>>        Boolean bOk
73606>>>>>>>        
73606>>>>>>>        Move 0 to hHash
73607>>>>>>>        Get piHash to iAlgorithm
73608>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
73609>>>>>>>        
73609>>>>>>>        Function_Return hHash
73610>>>>>>>    End_Function
73611>>>>>>>    
73611>>>>>>>    // Destroys the hash object
73611>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
73613>>>>>>>        Function_Return (CryptDestroyHash(hHash))
73614>>>>>>>    End_Function
73615>>>>>>>    
73615>>>>>>>    // Adds data to hash object
73615>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
73617>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
73618>>>>>>>    End_Function
73619>>>>>>>    
73619>>>>>>>    // Generates session key
73619>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
73621>>>>>>>        Integer iAlgorithm
73621>>>>>>>        Handle hKey
73621>>>>>>>        Boolean bOk
73621>>>>>>>        
73621>>>>>>>        Move 0 to hKey
73622>>>>>>>        Get piCipher to iAlgorithm
73623>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
73624>>>>>>>        
73624>>>>>>>        Function_Return hKey
73625>>>>>>>    End_Function
73626>>>>>>>    
73626>>>>>>>    // Imports a plain text key
73626>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
73628>>>>>>>        tPLAINTEXTKEYBLOB blobhead
73628>>>>>>>        tPLAINTEXTKEYBLOB blobhead
73628>>>>>>>        Boolean   bSuccess
73628>>>>>>>        Handle    hKey
73628>>>>>>>        Integer   iHeadSize iKeySize
73628>>>>>>>        UChar[]   ucaKeyblob
73629>>>>>>>        Integer iVoid
73629>>>>>>>        
73629>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
73630>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
73631>>>>>>>        
73631>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
73632>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
73633>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
73634>>>>>>>        Move iKeySize           to blobhead.dwKeySize
73635>>>>>>>        
73635>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
73636>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
73637>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
73638>>>>>>>        
73638>>>>>>>        Move 0 to hKey
73639>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
73640>>>>>>>        If (not(bSuccess)) Begin
73642>>>>>>>            Move (ShowLastError()) to iVoid
73643>>>>>>>        End
73643>>>>>>>>
73643>>>>>>>        
73643>>>>>>>        Function_Return hKey
73644>>>>>>>    End_Function
73645>>>>>>>    
73645>>>>>>>    // Destroys the key
73645>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
73647>>>>>>>        Function_Return (CryptDestroyKey(hKey))
73648>>>>>>>    End_Function
73649>>>>>>>    
73649>>>>>>>    // Retrieves key data
73649>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
73651>>>>>>>        Integer iBuffer iLen
73651>>>>>>>        Boolean bOk
73651>>>>>>>        
73651>>>>>>>        Move (SizeOfType(Integer)) to iLen
73652>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
73653>>>>>>>        Function_Return iBuffer
73654>>>>>>>    End_Function
73655>>>>>>>    
73655>>>>>>>    // Retrieves a hash value
73655>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
73657>>>>>>>        UChar[] ucHash
73658>>>>>>>        Integer liResult
73658>>>>>>>        DWord   dwDataLen
73658>>>>>>>        
73658>>>>>>>        Move 0 to dwDataLen
73659>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
73660>>>>>>>        If (liResult = 0) ;            Function_Return ""
73663>>>>>>>        
73663>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
73664>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
73665>>>>>>>        If (liResult = 0) ;            Function_Return ""
73668>>>>>>>        
73668>>>>>>>        Function_Return ucHash
73669>>>>>>>    End_Function
73670>>>>>>>
73670>>>>>>>    // Encrypts data
73670>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
73672>>>>>>>        Handle hProv hHash hKey
73672>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
73672>>>>>>>        Boolean bOk
73672>>>>>>>        
73672>>>>>>>        Get AcquireContext to hProv
73673>>>>>>>        If (hProv) Begin
73675>>>>>>>            Get CreateHash hProv to hHash
73676>>>>>>>            If (hHash) Begin
73678>>>>>>>                Get HashData hHash ucPassword to bOk
73679>>>>>>>                If (bOk) Begin
73681>>>>>>>                    Get piCipher to iAlgorithm
73682>>>>>>>                    Get DeriveKey hProv hHash to hKey
73683>>>>>>>                End
73683>>>>>>>>
73683>>>>>>>                Get DestroyHash hHash to bOk
73684>>>>>>>            End
73684>>>>>>>>
73684>>>>>>>            
73684>>>>>>>            If (hKey) Begin
73686>>>>>>>                //  First call to determine resulting data size
73686>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
73687>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
73688>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
73689>>>>>>>                
73689>>>>>>>                //  Reserve space in string
73689>>>>>>>                If (iDataLen < iCipherLen) Begin
73691>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
73692>>>>>>>                End
73692>>>>>>>>
73692>>>>>>>                
73692>>>>>>>                //  Call to really decrypt
73692>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
73693>>>>>>>                //If (not(bOk)) Begin
73693>>>>>>>                //Move "" to sData
73693>>>>>>>                //Move (GetLastError()) to iErr
73693>>>>>>>                //End
73693>>>>>>>                
73693>>>>>>>                Get DestroyKey hKey to bOk
73694>>>>>>>            End 
73694>>>>>>>>
73694>>>>>>>            Get ReleaseContext hProv to bOk
73695>>>>>>>        End 
73695>>>>>>>>
73695>>>>>>>        Function_Return ucData
73696>>>>>>>    End_Function
73697>>>>>>>    
73697>>>>>>>    // Decrypts data
73697>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
73699>>>>>>>        Handle hProv hHash hKey
73699>>>>>>>        Integer iAlgorithm iDataLen
73699>>>>>>>        Boolean bOk
73699>>>>>>>        
73699>>>>>>>        Get AcquireContext to hProv
73700>>>>>>>        If (hProv) Begin
73702>>>>>>>            Get CreateHash hProv to hHash
73703>>>>>>>            If (hHash) Begin
73705>>>>>>>                Get HashData hHash ucPassword to bOk
73706>>>>>>>                If (bOk) Begin
73708>>>>>>>                    Get piCipher to iAlgorithm
73709>>>>>>>                    Get DeriveKey hProv hHash to hKey
73710>>>>>>>                End
73710>>>>>>>>
73710>>>>>>>                Get DestroyHash hHash to bOk
73711>>>>>>>            End
73711>>>>>>>>
73711>>>>>>>            
73711>>>>>>>            If (hKey) Begin
73713>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
73714>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
73715>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
73715>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
73717>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
73718>>>>>>>                End
73718>>>>>>>>
73718>>>>>>>                
73718>>>>>>>                Get DestroyKey hKey to bOk
73719>>>>>>>            End
73719>>>>>>>>
73719>>>>>>>            Get ReleaseContext hProv to bOk
73720>>>>>>>        End
73720>>>>>>>>
73720>>>>>>>        Function_Return ucData
73721>>>>>>>    End_Function
73722>>>>>>>    
73722>>>>>>>    // Creates a key
73722>>>>>>>    Function CreateKey Handle hProv Returns Handle
73724>>>>>>>        Integer iAlg iType iByte iLength iSize
73724>>>>>>>        CryptoBlob keyBlob
73724>>>>>>>        CryptoBlob keyBlob
73724>>>>>>>        Boolean bOk
73724>>>>>>>        Handle hKey
73724>>>>>>>        UChar[] aKey
73725>>>>>>>
73725>>>>>>>        Get paKey to aKey
73726>>>>>>>        Get piKeyAlg to iAlg
73727>>>>>>>        Get piKeyType to iType
73728>>>>>>>        Move iAlg                   to keyBlob.header.bType
73729>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
73730>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
73731>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
73732>>>>>>>        
73732>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
73733>>>>>>>        For iByte from 0 to iLength
73739>>>>>>>>
73739>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
73740>>>>>>>        Loop
73741>>>>>>>>
73741>>>>>>>        
73741>>>>>>>        Move 0 to hKey
73742>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
73743>>>>>>>        Function_Return hKey
73744>>>>>>>    End_Function
73745>>>>>>>    
73745>>>>>>>    // Sets the key parameters
73745>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
73747>>>>>>>        Integer iPadding iMode
73747>>>>>>>        Boolean bOk
73747>>>>>>>        UChar[] aIV
73748>>>>>>>        
73748>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
73748>>>>>>>        //For iByte from 0 to iLength
73748>>>>>>>        //    Move iByte to aIV[iByte]
73748>>>>>>>        //Loop
73748>>>>>>>
73748>>>>>>>        // Set initialization vector
73748>>>>>>>        Get paIV to aIV
73749>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
73750>>>>>>>        If (bOk) Begin
73752>>>>>>>            // Set padding
73752>>>>>>>            Get piKeyPadding to iPadding
73753>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
73754>>>>>>>            If (bOk) Begin
73756>>>>>>>                // Set move
73756>>>>>>>                Get piKeyMode to iMode
73757>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
73758>>>>>>>            End
73758>>>>>>>>
73758>>>>>>>        End
73758>>>>>>>>
73758>>>>>>>        Function_Return bOk        
73759>>>>>>>    End_Function
73760>>>>>>>    
73760>>>>>>>    // Encrypts using block cipher
73760>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
73762>>>>>>>        Handle hProv hKey
73762>>>>>>>        Integer iLen iSize iBlocks
73762>>>>>>>        Boolean bOk
73762>>>>>>>        
73762>>>>>>>        Get AcquireContext to hProv
73763>>>>>>>        If (hProv) Begin
73765>>>>>>>            // Create key
73765>>>>>>>            Get CreateKey hProv to hKey
73766>>>>>>>            If (hKey) Begin
73768>>>>>>>                Get SetKeyParameters hKey to bOk
73769>>>>>>>                If (bOk) Begin
73771>>>>>>>                    // Buffer for block ciphers can be up to block length larger
73771>>>>>>>                    Get piBlockSize to iSize
73772>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
73773>>>>>>>                    
73773>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
73774>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
73775>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
73776>>>>>>>                End
73776>>>>>>>>
73776>>>>>>>                Get DestroyKey hKey to bOk
73777>>>>>>>            End
73777>>>>>>>>
73777>>>>>>>            Get ReleaseContext hProv to bOk
73778>>>>>>>        End
73778>>>>>>>>
73778>>>>>>>        Function_Return ucData
73779>>>>>>>    End_Function
73780>>>>>>>    
73780>>>>>>>    // Decrypts using block cipher
73780>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
73782>>>>>>>        Handle hProv hKey
73782>>>>>>>        Integer iLen
73782>>>>>>>        Boolean bOk
73782>>>>>>>        
73782>>>>>>>        Get AcquireContext to hProv
73783>>>>>>>        If (hProv) Begin
73785>>>>>>>            // Create key
73785>>>>>>>            Get CreateKey hProv to hKey
73786>>>>>>>            If (hKey) Begin
73788>>>>>>>                Get SetKeyParameters hKey to bOk
73789>>>>>>>                If (bOk) Begin
73791>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
73792>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
73793>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
73794>>>>>>>                End
73794>>>>>>>>
73794>>>>>>>                Get DestroyKey hKey to bOk
73795>>>>>>>            End
73795>>>>>>>>
73795>>>>>>>            Get ReleaseContext hProv to bOk
73796>>>>>>>        End
73796>>>>>>>>
73796>>>>>>>        Function_Return ucData
73797>>>>>>>    End_Function
73798>>>>>>>    
73798>>>>>>>    
73798>>>>>>>    //  Generates random data.
73798>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
73800>>>>>>>        Handle hProv
73800>>>>>>>        UChar[] uaResult
73801>>>>>>>        Boolean bRes
73801>>>>>>>        
73801>>>>>>>        Get AcquireContext to hProv
73802>>>>>>>        
73802>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
73803>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
73804>>>>>>>        
73804>>>>>>>        Get ReleaseContext hProv to bRes
73805>>>>>>>        
73805>>>>>>>        Function_Return uaResult
73806>>>>>>>    End_Function
73807>>>>>>>    
73807>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
73807>>>>>>>    Function GenerateRandomString Integer iLength Returns String
73809>>>>>>>        String sResult
73809>>>>>>>        UChar[] ucData
73810>>>>>>>        Pointer pBase64
73810>>>>>>>        Integer iVoid
73810>>>>>>>        
73810>>>>>>>        Get GenerateRandom iLength to ucData
73811>>>>>>>        
73811>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
73812>>>>>>>        Move (PointerToString(pBase64)) to sResult
73813>>>>>>>        Move (Free(pBase64)) to iVoid
73814>>>>>>>        
73814>>>>>>>        Function_Return (Left(sResult, iLength))
73815>>>>>>>    End_Function
73816>>>>>>>    
73816>>>>>>>End_Class
73817>>>>>
73817>>>>>Class cLoginEncryption is a cObject
73818>>>>>    
73818>>>>>    Procedure Construct_Object
73820>>>>>        Forward Send Construct_Object
73822>>>>>        // this must be set to a multi (40ish) character random key
73822>>>>>        Property String psEncryptPassword ""
73823>>>>>        
73823>>>>>        Object oDataCrypter is a cCryptographerEx
73825>>>>>            Set piHash to CALG_SHA_256
73826>>>>>            Set piCipher to CALG_AES_256
73827>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
73828>>>>>            Set piProvider to PROV_RSA_AES
73829>>>>>        End_Object
73830>>>>>    End_Procedure
73831>>>>>    
73831>>>>>    // This can be augmented to return a password encryption key using any
73831>>>>>    // hidden mechanism desired.
73831>>>>>    Function GetEncryptionPassword Returns String
73833>>>>>        String sPassword
73833>>>>>        Get psEncryptPassword to sPassword
73834>>>>>        Function_Return sPassword
73835>>>>>    End_Function
73836>>>>>    
73836>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
73836>>>>>    //
73836>>>>>    // Params:
73836>>>>>    //   sPlainText     String to encrypt.
73836>>>>>    // Returns:
73836>>>>>    //   Base64 encoded hash.
73836>>>>>    Function EncryptPassword String sPlainText Returns String
73838>>>>>        String sEncryptPassword sBase64
73838>>>>>        UChar[] ucBinary
73839>>>>>        Pointer pBase64
73839>>>>>        Integer iVoid
73839>>>>>        
73839>>>>>        //  Encrypt Key
73839>>>>>        Get GetEncryptionPassword to sEncryptPassword
73840>>>>>        If (sEncryptPassword = "") Begin
73842>>>>>            Error DFERR_PROGRAM "No encryption password set"
73843>>>>>>
73843>>>>>        End
73843>>>>>>
73843>>>>>        
73843>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
73844>>>>>        
73844>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
73846>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
73847>>>>>>
73847>>>>>            Function_Return ""
73848>>>>>        End
73848>>>>>>
73848>>>>>        
73848>>>>>        //  Encode binary hash to Base64
73848>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
73849>>>>>        Move (PointerToString(pBase64)) to sBase64
73850>>>>>        Move (Free(pBase64)) to iVoid
73851>>>>>        
73851>>>>>        Function_Return sBase64
73852>>>>>    End_Function
73853>>>>>    
73853>>>>>    
73853>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
73853>>>>>    //
73853>>>>>    // Params:
73853>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
73853>>>>>    // Returns:
73853>>>>>    //   Readable plain text password
73853>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
73855>>>>>        String sEncryptPassword
73855>>>>>        UChar[] ucBinary ucPlain
73857>>>>>        Boolean bIsHex
73857>>>>>        Integer iLen iVoid
73857>>>>>        Pointer pBinary
73857>>>>>        
73857>>>>>        If (sBase64EncryptedPassword <> "") Begin
73859>>>>>            //  Decode from Base64
73859>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
73860>>>>>            
73860>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
73861>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
73862>>>>>                        
73862>>>>>            Move (Free(pBinary)) to iVoid
73863>>>>>            
73863>>>>>            //  Encrypted binary hash to string
73863>>>>>            Get GetEncryptionPassword to sEncryptPassword
73864>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
73865>>>>>        End
73865>>>>>>
73865>>>>>        
73865>>>>>        Function_Return (UCharArrayToString(ucPlain))
73866>>>>>    End_Function
73867>>>>>End_Class
73868>>>
73868>>>Object oLoginEncryption is a cLoginEncryption
73870>>>
73870>>>    // this must be created in your appsrc directory and must contain an encryption
73870>>>    // key that is set to psEncryptPassword. It will look something like this
73870>>>    //
73870>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
73870>>>    //  
Including file: LoginEncryptionKey.inc    (C:\DataFlex Projects\Media\AppSrc\LoginEncryptionKey.inc)
73870>>>>// Studio generated login encryption key
73870>>>>Set psEncryptPassword to "0MZdb1d%c%._$O2V>~)(qR?{/A->yBtVXXgr((q5"
73871>>>>
73871>>>    
73871>>>    // use this to register this object to your cConnection Object. This object
73871>>>    // must be created after the cConnection object
73871>>>    Move Self to ghoLoginEncryption
73872>>>End_Object
73873>        Use DatabaseLoginDialog.dg
Including file: DatabaseLoginDialog.dg    (C:\Program Files\DataFlex 20.1\Pkg\DatabaseLoginDialog.dg)
73873>>>
73873>>>Use Windows.pkg
73873>>>Use cConnection.pkg
73873>>>Use dfLine.pkg
73873>>>
73873>>>Object oDatabaseLoginDialog is a ModalPanel
73875>>>    Set Label to "Database Login"
73876>>>    Set Location to 2 2
73877>>>    Set Size to 110 211
73878>>>    
73878>>>    Property String psId
73880>>>    Property Boolean pbOk False
73882>>>    Property Boolean pbChanged False
73884>>>    Property Boolean pbAllowRemember True
73886>>>    
73886>>>    // this registers this object with the cConnection object.
73886>>>    Move Self to ghoLoginConnectDialog
73887>>>    
73887>>>    Object oUserIDForm is a Form
73889>>>        Set Label to "User Name"
73890>>>        Set Size to 12 85
73891>>>        Set Location to 34 79
73892>>>        Set Label_Col_Offset to 64
73893>>>        Set peAnchors to anTopLeftRight
73894>>>    End_Object
73895>>>    
73895>>>    Object oPwdForm is a Form
73897>>>        Set Size to 12 85
73898>>>        Set Location to 49 79
73899>>>        Set Label_Col_Offset to 64
73900>>>        Set Password_State to True
73901>>>        Set peAnchors to anTopLeftRight
73902>>>        Set Label to "Password"
73903>>>    End_Object
73904>>>    
73904>>>    Object oTrustedConnection is a CheckBox
73906>>>        Set Size to 10 50
73907>>>        Set Location to 65 79
73908>>>        Set Label to "Trusted Connection"
73909>>>    End_Object
73910>>>    
73910>>>    Object oRemember is a CheckBox
73912>>>        Set Size to 10 50
73913>>>        Set Location to 79 14
73914>>>        Set Label to "Remember and don't ask again"
73915>>>        Set Checked_State to True
73916>>>    End_Object
73917>>>    
73917>>>    Object oLogin_btn is a Button
73919>>>        Set Label to "&Login"
73920>>>        Set Location to 92 102
73921>>>        Set peAnchors to anBottomRight
73922>>>        Set Default_State to True
73923>>>        
73923>>>        Procedure OnClick
73926>>>            Boolean bTrust
73926>>>            String sUser sPwd sConn sErr sId
73926>>>            Integer iError
73926>>>            Get psId to sId
73927>>>            Get Value of oUserIDForm to sUser
73928>>>            Get Value of oPwdForm to sPwd
73929>>>            Get Checked_State of oTrustedConnection to bTrust
73930>>>            
73930>>>            Get LoginConnectIdNewCredentials of ghoConnection sId sUser sPwd bTrust to iError
73931>>>            If (iError=0) Begin
73933>>>                Set pbOk to True
73934>>>                Set pbChanged to True
73935>>>                Send Close_Panel
73936>>>            End
73936>>>>
73936>>>            Else Begin
73937>>>                Get psErrorText of ghoConnection to sErr
73938>>>                Send UserError sErr "Login Error"
73939>>>            End
73939>>>>
73939>>>        End_Procedure
73940>>>    End_Object
73941>>>    
73941>>>    Object oCancel_btn is a Button
73943>>>        Set Label to "&Cancel"
73944>>>        Set Location to 92 157
73945>>>        Set peAnchors to anBottomRight
73946>>>        
73946>>>        Procedure OnClick
73949>>>            Send Close_Panel
73950>>>        End_Procedure
73951>>>    End_Object
73952>>>    
73952>>>    Object oConnectionIdInfo is a TextBox
73954>>>        Set Size to 10 50
73955>>>        Set Location to 4 14
73956>>>        Set Label to 'Connection Id='
73957>>>    End_Object
73958>>>    
73958>>>    Object oConnectionServerInfo is a TextBox
73960>>>        Set Size to 10 50
73961>>>        Set Location to 16 14
73962>>>        Set Label to 'Server'
73963>>>    End_Object
73964>>>    
73964>>>    Object oLineControl1 is a LineControl
73966>>>        Set Size to 2 202
73967>>>        Set Location to 29 5
73968>>>    End_Object
73969>>>    
73969>>>    Function LoginConnectIdDialog String sId Returns Boolean
73972>>>        Boolean bOk bChanged bTrusted bAllowRemember bRemember
73972>>>        String sUser sPwd sDescription
73972>>>        tConnection Connect
73972>>>        tConnection Connect
73972>>>        
73972>>>        Get pbAllowRemember to bAllowRemember
73973>>>        
73973>>>        
73973>>>        If not bAllowRemember Begin
73975>>>            Set Enabled_State of oRemember to bRemember
73976>>>            Set Visible_State of oRemember to bRemember
73977>>>        End
73977>>>>
73977>>>        
73977>>>        Get ConnectionIdInfo of ghoConnection sId to Connect
73978>>>        Set Value of oConnectionIdInfo to ("Connection ID="+Connect.sId)
73979>>>        Set Value of oConnectionServerInfo to Connect.sString
73980>>>        
73980>>>        Set psId to sId
73981>>>        Set pbOk to False
73982>>>        Set pbChanged to False
73983>>>        Set Value of oUserIDForm to Connect.sUID
73984>>>        Set Value of oPwdForm to ""
73985>>>        
73985>>>        Send Popup
73986>>>        
73986>>>        Get pbOk to bOk
73987>>>        Get pbChanged to bChanged
73988>>>        If (bChanged and bOk) Begin
73990>>>            If bAllowRemember Begin
73992>>>                Get Checked_State of oRemember to bRemember
73993>>>                If bRemember Begin
73995>>>                    Get Checked_State of oTrustedConnection to bTrusted
73996>>>                    If not (bTrusted) Begin
73998>>>                        Get Value of oUserIDForm to sUser
73999>>>                        Get Value of oPwdForm to sPwd
74000>>>                    End
74000>>>>
74000>>>                    Get StoreConnectionIdCredentials of ghoConnection sId sUser sPwd bTrusted to bOk
74001>>>                End
74001>>>>
74001>>>            End
74001>>>>
74001>>>        End
74001>>>>
74001>>>        Function_Return bOk
74002>>>    End_Function
74003>>>    
74003>>>    
74003>>>    On_Key Key_Alt+Key_O Send KeyAction of oLogin_btn
74004>>>    On_Key Key_Alt+Key_L Send KeyAction of oCancel_btn
74005>>>End_Object
74006>>>
74006>    End_Object
74007>
74007>End_Object
74008>
74008>Object oToolTipController is a cToolTipController
74010>    Move Self to ghoToolTipController
74011>End_Object
74012>
74012>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 20.1\Pkg\oEditContextMenu.pkg)
74012>>>Use cCJStandardMenuItemClasses.pkg
74012>>>
74012>>>Object oEditContextMenu is a cCJContextMenu
74014>>>    
74014>>>    Move Self to Default_Form_Floating_Menu_ID
74015>>>    
74015>>>    Object oUndoMenuItem is a cCJUndoMenuItem
74017>>>    End_Object
74018>>>    
74018>>>    Object oCutMenuItem is a cCJCutMenuItem
74020>>>        Set pbControlBeginGroup to True
74021>>>    End_Object
74022>>>    
74022>>>    Object oCopyMenuItem is a cCJCopyMenuItem
74024>>>    End_Object
74025>>>
74025>>>    Object oPasteMenuItem is a cCJPasteMenuItem
74027>>>    End_Object
74028>>>
74028>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
74030>>>    End_Object
74031>>>
74031>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
74033>>>        Set pbControlBeginGroup to True
74034>>>    End_Object
74035>>>
74035>>>End_Object
74036>>>
74036>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\DataFlex 20.1\Pkg\oDEOEditContextMenu17.pkg)
74036>>>Use Windows.pkg
74036>>>Use cCJStandardMenuItemClasses.pkg
74036>>>Use cCJDeoMenuItemClasses.pkg
74036>>>
74036>>>
74036>>>Object oDEOEditContextMenu17 is a cCJContextMenu
74038>>>    
74038>>>    Move Self to Default_dbFloating_Menu_ID
74039>>>    
74039>>>    Object oUndoMenuItem is a cCJUndoMenuItem
74041>>>    End_Object
74042>>>    
74042>>>    Object oCutMenuItem is a cCJCutMenuItem
74044>>>        Set pbControlBeginGroup to True
74045>>>    End_Object
74046>>>    
74046>>>    Object oCopyMenuItem is a cCJCopyMenuItem
74048>>>    End_Object
74049>>>
74049>>>    Object oPasteMenuItem is a cCJPasteMenuItem
74051>>>    End_Object
74052>>>
74052>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
74054>>>    End_Object
74055>>>
74055>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
74057>>>        Set pbControlBeginGroup to True
74058>>>    End_Object
74059>>>
74059>>>    Object oPromptMenuItem is a cCJPromptMenuItem
74061>>>        Set pbControlBeginGroup to True
74062>>>    End_Object
74063>>>
74063>>>    Object oFindNextMenu is a cCJFindNextMenuItem
74065>>>        Set pbControlBeginGroup to True
74066>>>    End_Object
74067>>>
74067>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
74069>>>    End_Object
74070>>>
74070>>>    Object oClearMenuItem is a cCJClearMenuItem
74072>>>        Set pbControlBeginGroup to True
74073>>>    End_Object
74074>>>
74074>>>    Object oClearAllMenu is a cCJClearAllMenuItem
74076>>>    End_Object
74077>>>
74077>>>    Object oSaveMenu is a cCJSaveMenuItem
74079>>>    End_Object
74080>>>    
74080>>>    Object oDeleteMenu is a cCJDeleteMenuItem
74082>>>    End_Object
74083>>>
74083>>>    Object oRememberitem is a cCJRememberFieldMenuItem
74085>>>        Set pbControlBeginGroup to True
74086>>>    End_Object
74087>>>
74087>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
74089>>>    End_Object
74090>>>
74090>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
74092>>>    End_Object
74093>>>
74093>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
74095>>>    End_Object
74096>>>
74096>>>End_Object
74097>
74097>Object oMain is a Panel
74099>    Set Label To "My Project"
74100>    Set Location to 4 3
74101>    Set Size to 300 450
74102>
74102>    Object oCommandBarSystem is a cCJCommandBarSystem
74104>        Set pbTimerUpdate to True
74105>        Set peVisualTheme to xtpThemeOffice2013Outlook
74106>        Set pbAutoResizeIcons to True
74107>
74107>        Procedure OnCreateCommandBars
74110>            Handle hoOptions
74110>            Get OptionsObject to hoOptions
74111>            Forward Send OnCreateCommandBars
74113>        End_Procedure
74114>
74114>        Object oMenuBar is a cCJMenuBar
74116>
74116>            Object oFileMenu is a cCJMenuItem
74118>                Set peControlType to xtpControlPopup          
74119>                Set psCaption   to "&File"
74120>                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
74121>                Set psCategory to "Menus"
74122>
74122>                Object oClearMenuItem is a cCJClearMenuItem
74124>                    Set pbAddToDesignerMenu to True
74125>                End_Object
74126>
74126>                Object oClearAllMenu is a cCJClearAllMenuItem
74128>                    Set pbAddToDesignerMenu to True
74129>                End_Object
74130>
74130>                Object oPromptMenuItem is a cCJPromptMenuItem
74132>                    Set pbAddToDesignerMenu to True
74133>                    Set pbControlBeginGroup to True
74134>                End_Object
74135>
74135>                Object oFindMenuItem is a cCJFindMenuItem
74137>                    Set pbAddToDesignerMenu to True
74138>                    Set pbControlBeginGroup to True
74139>                End_Object
74140>
74140>                Object oFindNextMenu is a cCJFindNextMenuItem
74142>                    Set pbAddToDesignerMenu to True
74143>                End_Object
74144>
74144>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
74146>                    Set pbAddToDesignerMenu to True
74147>                End_Object
74148>
74148>                Object oFindFirstMenu is a cCJFindFirstMenuItem
74150>                    Set pbAddToDesignerMenu to True
74151>                End_Object
74152>
74152>                Object oFindLastMenu is a cCJFindLastMenuItem
74154>                    Set pbAddToDesignerMenu to True
74155>                End_Object
74156>
74156>                Object oSaveMenuItem is a cCJSaveMenuItem
74158>                    Set pbAddToDesignerMenu to True
74159>                    Set pbControlBeginGroup to True
74160>                End_Object
74161>
74161>                Object oDeleteMenuItem is a cCJDeleteMenuItem
74163>                    Set pbAddToDesignerMenu to True
74164>                End_Object
74165>
74165>                Object oExitMenu is a cCJExitMenuItem
74167>                    Set pbControlBeginGroup to True
74168>                End_Object
74169>
74169>            End_Object
74170>
74170>            Object oViewMenu is a cCJMenuItem
74172>                Set peControlType to xtpControlPopup
74173>                Set psCaption to "&View"
74174>                Set psToolTip to "View"
74175>                Set psDescription to "Available Views"
74176>
74176>                Object oPeopleMenuItem is a cCJMenuItem
74178>                    Set psCaption to "People"
74179>                    Set psTooltip to "People"
74180>                
74180>                    Procedure OnExecute Variant vCommandBarControl
74183>                        Handle hoClient
74183>                        Get Client_Id to hoClient
74184>                        Send Activate_oPeople of hoClient
74185>                    End_Procedure
74186>                End_Object
74187>
74187>                Object oMediaMenuItem is a cCJMenuItem
74189>                    Set psCaption to "Media"
74190>                    Set psTooltip to "Media"
74191>                
74191>                    Procedure OnExecute Variant vCommandBarControl
74194>                        Handle hoClient
74194>                        Get Client_Id to hoClient
74195>                        Send Activate_oMedia of hoClient
74196>                    End_Procedure
74197>                End_Object
74198>            End_Object
74199>            
74199>            Object oReportMenu is a cCJMenuItem
74201>                Set peControlType to xtpControlPopup          
74202>                Set psCaption to "&Report"
74203>                Set psToolTip to "Report"
74204>                Set psDescription to "Available Reports"
74205>            End_Object
74206>
74206>            Object oNavigateMenu is a cCJMenuItem
74208>                Set peControlType to xtpControlPopup      
74209>                Set psCaption to "&Navigate"    
74210>                Set psTooltip to "Navigate"    
74211>                Set psDescription to "Move to different areas of the application"
74212>
74212>                Object oNextAreaMenu is a cCJNextAreaMenu
74214>                End_Object
74215>
74215>                Object oPriorAreaMenu is a cCJPriorAreaMenu
74217>                End_Object
74218>
74218>                Object oNextViewMenu is a cCJNextViewMenu
74220>                End_Object
74221>
74221>                Object oPriorViewMenu is a cCJPriorViewMenu
74223>                End_Object
74224>
74224>                Object oPromptMenu is a cCJPromptMenuItem
74226>                    Set pbControlBeginGroup to True
74227>                End_Object
74228>
74228>                Object oZoomMenu is a cCJZoomMenuItem
74230>                End_Object
74231>
74231>            End_Object
74232>
74232>            Object oWindowMenu is a cCJMDIWindowsMenuItem
74234>                Set peControlType to xtpControlPopup
74235>                Set psCaption to "&Window"
74236>                Set psToolTip to "Window"
74237>                Set psDescription to "Display Current Views and set other display options."    
74238>
74238>                // These are the static windows items. More will be created in onInitPopup 
74238>                Object oDisplayOptionsMenu is a cCJMenuItem
74240>                    Set peControlType to xtpControlPopup          
74241>                    Set psCaption to "&Display Options"
74242>                    Set psToolTip to "Display Options"
74243>                    Set psDescription to "Set display options"
74244>
74244>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
74246>                    End_Object
74247>
74247>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
74249>                    End_Object
74250>
74250>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
74252>                        Set pbControlBeginGroup to True
74253>                    End_Object
74254>
74254>                End_Object
74255>
74255>                Object oCascadeMenu is a cCJCascadeMenuItem
74257>                    Set pbControlBeginGroup to True
74258>                End_Object
74259>
74259>                Object oHorizTile is a cCJTileHorizontally
74261>                End_Object
74262>
74262>                Object oVertTile is a cCJTileVertically
74264>                End_Object
74265>
74265>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
74267>                    Set pbControlBeginGroup to True
74268>                End_Object
74269>
74269>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
74271>                End_Object
74272>
74272>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
74274>                    Set pbControlBeginGroup to True
74275>                End_Object
74276>
74276>            End_Object
74277>
74277>            Object oHelpMenu is a cCJMenuItem
74279>                Set peControlType to xtpControlPopup    
74280>                Set psCaption to "&Help"
74281>                Set psDescription to "Access Information for learning and using this DataFlex application."
74282>                Set psToolTip to "Help"
74283>
74283>                Object oHelpMenuItem is a cCJHelpMenuItem 
74285>                End_Object
74286>
74286>                Object oAboutMenuItem is a cCJAboutMenuItem
74288>                End_Object
74289>
74289>            End_Object
74290>
74290>        End_Object
74291>
74291>        Object oFindToolBar is a cCJToolbar
74293>            Set psTitle to "Finding Toolbar"
74294>
74294>            Object oFindFirstTool is a cCJFindFirstMenuItem
74296>            End_Object
74297>
74297>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
74299>            End_Object
74300>
74300>            Object oFindMenuTool is a cCJFindMenuItem
74302>            End_Object
74303>
74303>            Object oFindNextTool is a cCJFindNextMenuItem
74305>            End_Object
74306>
74306>            Object oFindLastTool is a cCJFindLastMenuItem
74308>            End_Object
74309>
74309>            Object oPromptToolItem is a cCJPromptMenuItem
74311>                Set pbControlBeginGroup to True
74312>            End_Object
74313>
74313>        End_Object
74314>
74314>        Object oFileToolBar is a cCJToolbar
74316>            Set psTitle to "Data Entry Toolbar"
74317>
74317>            Object oClearToolItem is a cCJClearMenuItem
74319>                Set peControlStyle to xtpButtonIconAndCaption
74320>            End_Object
74321>
74321>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
74323>                Set peControlStyle to xtpButtonIconAndCaption
74324>            End_Object
74325>
74325>            Object oSaveToolItem is a cCJSaveMenuItem
74327>                Set peControlStyle to xtpButtonIconAndCaption
74328>                Set pbControlBeginGroup to True
74329>            End_Object
74330>
74330>            Object oDeleteToolItem is a cCJDeleteMenuItem
74332>                Set peControlStyle to xtpButtonIconAndCaption
74333>            End_Object
74334>
74334>        End_Object
74335>
74335>        Object oEditToolBar is a cCJToolbar
74337>            Set psTitle to "Edit Toolbar"
74338>
74338>            Object oCutToolbarItem is a cCJCutMenuItem
74340>            End_Object
74341>
74341>            Object oCopyToolbarItem is a cCJCopyMenuItem
74343>            End_Object
74344>
74344>            Object oPasteToolbarItem is a cCJPasteMenuItem
74346>            End_Object
74347>
74347>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
74349>                Set pbControlBeginGroup to True
74350>            End_Object
74351>
74351>        End_Object
74352>
74352>        Object oRememberToolbar is a cCJToolbar
74354>            Set psTitle to C_$Remember
74355>
74355>            Object oRememberItems is a cCJMenuItem
74357>
74357>                Set peControlType to xtpControlPopup
74358>                Set peControlStyle to xtpButtonCaption
74359>                Set psCaption to C_$Remember
74360>                
74360>                Object oMenuItem is a cCJRememberFieldMenuItem
74362>                    Set peControlStyle to xtpButtonIconAndCaption
74363>                End_Object
74364>                
74364>                Object oMenuItem is a cCJRememberLastFieldMenuItem
74366>                    Set peControlStyle to xtpButtonIconAndCaption
74367>                End_Object
74368>                
74368>                Object oMenuItem is a cCJUnRememberFieldMenuItem
74370>                    Set peControlStyle to xtpButtonIconAndCaption
74371>                End_Object
74372>                
74372>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
74374>                    Set peControlStyle to xtpButtonIconAndCaption
74375>                End_Object
74376>
74376>            End_Object
74377>            
74377>        End_Object
74378>        
74378>        Object oStatusBar is a cCJStatusBar
74380>
74380>            Object oStatusPane1 is a cCJStatusBarPane
74382>                Set piID to sbpIDIdlePane
74383>                Set pbStyleStretch to True
74384>            End_Object
74385>
74385>            Object oStatusPane2 is a cCJStatusBarPane
74387>                Set phoViewPane to Self
74388>                Set pbStyleStretch to True
74389>            End_Object
74390>
74390>        End_Object
74391>
74391>    End_Object
74392>
74392>    Object oClientArea is a ClientArea
74394>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\DataFlex 20.1\Pkg\StdAbout.pkg)
74394>>>// This provides a quick and simple way to create an about package for a program.
74394>>>// You need to create a message inside you client area called Activate_About.
74394>>>// Within this message you should send the message DoAbout passing needed
74394>>>// string information.
74394>>>//
74394>>>//       Procedure Activate_About
74394>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
74394>>>//       End_Procedure
74394>>>//    where: sTitle =     Name of application. If none provided, uses caption
74394>>>//                        bar title
74394>>>//           sVersion   = Version Line. If none provided, will be blank
74394>>>//           sCopyRight = Copyright Line. If none provided, will be blank
74394>>>//           sAuthor    = Author name, blank if none provided
74394>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
74394>>>//                        is used.
74394>>>// It is expected that you will place this in your own object package. For
74394>>>// example an order about package may look like this:
74394>>>//
74394>>>//   // OrderAbout.pkg
74394>>>//   Use StdAbout.pkg
74394>>>//   Procedure Activate_About
74394>>>//      String sTitle sCopyright sVersion sAuthor
74394>>>//      Move "My Order Entry System" to sTitle
74394>>>//      Move "Version 2.1" to sVersion
74394>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
74394>>>//      Move "John Smith"  to sAuthor
74394>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
74394>>>//   end_procedure
74394>>>//   // end of file.
74394>>>
74394>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfabout.pkg)
74394>>>>>Use LanguageText.pkg
74394>>>>>Use Windows.pkg
74394>>>>>Use DFbitmap.pkg
74394>>>>>Use GlobalFunctionsProcedures.pkg
74394>>>>>Use cTextEdit.pkg
74394>>>>>Use tWinStructs.pkg
74394>>>>>
74394>>>>>Use cli.pkg
74394>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 20.1\Pkg\DFBTRDRV.PKG)
74394>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
74394>>>>>>>// Notice      : This package contains constants and commands, used to call
74394>>>>>>>//               specific functions in the DFBTRDRV.
74394>>>>>>>Use Ui
74394>>>>>>>//
74394>>>>>>>// Driver Indentification
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>// Driver attributes
74394>>>>>>>//
74394>>>>>>>// Call_Driver functions ID's
74394>>>>>>>//
74394>>>>>>>//
74394>>>>>>>// DFBTRFN_CONVERT_FILE options
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// DFBTRFN_SET_OWNER options
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to create all vars which may be needed
74394>>>>>>>// in other commands.
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to set the owner of a Btrieve file.
74394>>>>>>>// File must have been opened.
74394>>>>>>>// Filenumber needs to be passed.
74394>>>>>>>// To clear set the owner to "".
74394>>>>>>>// Examples:
74394>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
74394>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
74394>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
74394>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
74394>>>>>>>// To clear:
74394>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to parse DFBTR_SET_OWNVER
74394>>>>>>>// options.
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to parse for Callback
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to clear the owner of a Btrieve file.
74394>>>>>>>// File must have been opened.
74394>>>>>>>// Filenumber needs to be passed.
74394>>>>>>>// Examples:
74394>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to add a owner name to the internal list of ownernames
74394>>>>>>>// which will be tries when opening files.
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to remove all owners from the internal list of ownernames
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to set the owner name to be used when opening the DDF files.
74394>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
74394>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
74394>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to change the transaction type.
74394>>>>>>>// Valid types are:
74394>>>>>>>//     DFBTRTT_NONE
74394>>>>>>>//     DFBTRTT_EXCLUSIVE
74394>>>>>>>//     DFBTRTT_CONCURRENT
74394>>>>>>>//
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to get the current transaction type.
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to set explicit_locking
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to get explicit locking
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>//
74394>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
74394>>>>>>>//
74394>>>>>>>
74394>>>>>>>// Purpose: An instance of this class can be used as a broker object to
74394>>>>>>>//          call several Dfbtrdrv releated methods.
74394>>>>>>>
74394>>>>>>>Class cDFBtrDrvHandler is an Array
74395>>>>>>>    
74395>>>>>>>    Procedure Construct_Object Integer iImage
74397>>>>>>>        Forward Send Construct_object iImage
74399>>>>>>>        
74399>>>>>>>        Property String  psDriverID "DFBTRDRV"
74400>>>>>>>    End_Procedure
74401>>>>>>>    
74401>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
74401>>>>>>>    //
74401>>>>>>>    
74401>>>>>>>    Function CKRevision Returns String
74403>>>>>>>        String  sDriverID
74403>>>>>>>        String  sRevision
74403>>>>>>>        String  sVoid
74403>>>>>>>        Integer iRetval
74403>>>>>>>        
74403>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74403>>>>>>>        // This error would otherwise be raised when we have an older
74403>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74403>>>>>>>        Send Ignore_error to Error_object_Id 20491
74404>>>>>>>        Get psDriverID to sDriverID
74405>>>>>>>        Move (Repeat(" ", 255)) to sRevision
74406>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
74411>>>>>>>        Send Trap_Error to Error_object_Id 20491
74412>>>>>>>        If (Trim(sRevision) = "") Begin
74414>>>>>>>            // Unable to get the revision. return all zeroes.
74414>>>>>>>            Move "0.0.0.0" to sRevision
74415>>>>>>>        End
74415>>>>>>>>
74415>>>>>>>        Function_Return sRevision
74416>>>>>>>    End_Function
74417>>>>>>>    
74417>>>>>>>    Function CkUsesUri Returns Integer
74419>>>>>>>        String  sDriverID
74419>>>>>>>        String  sVoid1
74419>>>>>>>        String  sVoid2
74419>>>>>>>        Integer iRetval
74419>>>>>>>        
74419>>>>>>>        Get psDriverID to sDriverID
74420>>>>>>>        
74420>>>>>>>        Move 0 to iRetval
74421>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74421>>>>>>>        // This error would otherwise be raised when we have an older
74421>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
74421>>>>>>>        Send Ignore_error to Error_object_Id 20491
74422>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
74427>>>>>>>        Send Trap_Error to Error_object_Id 20491
74428>>>>>>>        
74428>>>>>>>        Function_Return iRetval
74429>>>>>>>    End_Function
74430>>>>>>>    
74430>>>>>>>    
74430>>>>>>>    
74430>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
74430>>>>>>>    //
74430>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
74430>>>>>>>    //
74430>>>>>>>    
74430>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
74432>>>>>>>        Integer iPartRev
74432>>>>>>>        Integer iCurrentPart
74432>>>>>>>        Integer iSeparatorPos
74432>>>>>>>        
74432>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
74435>>>>>>>        
74435>>>>>>>        Move 0 to iCurrentPart
74436>>>>>>>        Repeat
74436>>>>>>>>
74436>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
74437>>>>>>>            If (iSeparatorPos > 0) Begin
74439>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
74440>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
74441>>>>>>>                Increment iCurrentPart
74442>>>>>>>            End
74442>>>>>>>>
74442>>>>>>>            Else If (sRevision <> "") Begin
74445>>>>>>>                Move sRevision to iPartRev
74446>>>>>>>                Move "" to sRevision
74447>>>>>>>                Increment iCurrentPart
74448>>>>>>>            End
74448>>>>>>>>
74448>>>>>>>            Else ;                Move -1 to iPartRev
74450>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
74452>>>>>>>        
74452>>>>>>>        Function_Return iPartRev
74453>>>>>>>    End_Function
74454>>>>>>>    
74454>>>>>>>    
74454>>>>>>>    
74454>>>>>>>    //
74454>>>>>>>    //  Returns the major revision of the CK
74454>>>>>>>    //
74454>>>>>>>    
74454>>>>>>>    Function CKMajorRevision Returns Integer
74456>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
74457>>>>>>>    End_Function
74458>>>>>>>    
74458>>>>>>>    
74458>>>>>>>    
74458>>>>>>>    //  Returns the minor revision of the CK
74458>>>>>>>    //
74458>>>>>>>    
74458>>>>>>>    Function CKMinorRevision Returns Integer
74460>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
74461>>>>>>>    End_Function
74462>>>>>>>    
74462>>>>>>>    
74462>>>>>>>    //  Returns the release revision of the CK
74462>>>>>>>    //
74462>>>>>>>    
74462>>>>>>>    Function CKReleaseRevision Returns Integer
74464>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
74465>>>>>>>    End_Function
74466>>>>>>>    
74466>>>>>>>    
74466>>>>>>>    //  Returns the major revision of the CK
74466>>>>>>>    //
74466>>>>>>>    
74466>>>>>>>    Function CKBuildRevision Returns Integer
74468>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
74469>>>>>>>    End_Function
74470>>>>>>>    
74470>>>>>>>    
74470>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
74470>>>>>>>    //
74470>>>>>>>    
74470>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
74472>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
74475>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
74478>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
74481>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
74484>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
74487>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
74491>>>>>>>            End
74491>>>>>>>>
74491>>>>>>>        End
74491>>>>>>>>
74491>>>>>>>        
74491>>>>>>>        Function_Return (False)
74492>>>>>>>    End_Function
74493>>>>>>>    
74493>>>>>>>    //   Functions to query the Pervasive.SQL version:
74493>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
74493>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
74493>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
74493>>>>>>>    //
74493>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
74493>>>>>>>    //   in the following format:
74493>>>>>>>    //       <version>.<revision>.<type>
74493>>>>>>>    //   possible values for <type>:
74493>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
74493>>>>>>>    //         server using Workgroup authentication mode
74493>>>>>>>    //       C for client cache engine
74493>>>>>>>    //       D for DOS workstation
74493>>>>>>>    //       N for client Requester
74493>>>>>>>    //       S for NetWare server
74493>>>>>>>    //       T for 32-bit Windows server engine
74493>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
74493>>>>>>>    //
74493>>>>>>>    //   example:
74493>>>>>>>    //       8.50.T
74493>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
74493>>>>>>>    //   32-bits Windows server.
74493>>>>>>>    //
74493>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
74493>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
74493>>>>>>>    //
74493>>>>>>>    //   If the version information is not available or can not be obtained
74493>>>>>>>    //   the functions will return "0.0.0"
74493>>>>>>>    
74493>>>>>>>    //  Returns the version information of the
74493>>>>>>>    //           Pervasive.SQL Client requester.
74493>>>>>>>    
74493>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
74495>>>>>>>        
74495>>>>>>>        String  sDriverID
74495>>>>>>>        String  sVersion
74495>>>>>>>        String  sVoid
74495>>>>>>>        Integer iRetval
74495>>>>>>>        
74495>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74495>>>>>>>        // This error would otherwise be raised when we have an older
74495>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74495>>>>>>>        Send Ignore_error to Error_object_Id 20491
74496>>>>>>>        Get psDriverID to sDriverID
74497>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74498>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74503>>>>>>>        Send Trap_Error to Error_object_Id 20491
74504>>>>>>>        If (Trim(sVersion) = "") Begin
74506>>>>>>>            // Unable to get the revision. return all zeroes.
74506>>>>>>>            Move "0.0.0" to sVersion
74507>>>>>>>        End
74507>>>>>>>>
74507>>>>>>>        Function_Return sVersion
74508>>>>>>>    End_Function
74509>>>>>>>    
74509>>>>>>>    //           Pervasive.SQL Engine
74509>>>>>>>    
74509>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
74511>>>>>>>        
74511>>>>>>>        String  sDriverID
74511>>>>>>>        String  sVersion
74511>>>>>>>        String  sVoid
74511>>>>>>>        Integer iRetval
74511>>>>>>>        
74511>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74511>>>>>>>        // This error would otherwise be raised when we have an older
74511>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74511>>>>>>>        Send Ignore_error to Error_object_Id 20491
74512>>>>>>>        Get psDriverID to sDriverID
74513>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74514>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74519>>>>>>>        Send Trap_Error to Error_object_Id 20491
74520>>>>>>>        If (Trim(sVersion) = "") Begin
74522>>>>>>>            // Unable to get the revision. return all zeroes.
74522>>>>>>>            Move "0.0.0" to sVersion
74523>>>>>>>        End
74523>>>>>>>>
74523>>>>>>>        Function_Return sVersion
74524>>>>>>>    End_Function
74525>>>>>>>    
74525>>>>>>>    //  Returns the version information of the
74525>>>>>>>    //           Pervasive.SQL Server Engine
74525>>>>>>>    
74525>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
74527>>>>>>>        
74527>>>>>>>        String  sDriverID
74527>>>>>>>        String  sVersion
74527>>>>>>>        String  sVoid
74527>>>>>>>        Integer iRetval
74527>>>>>>>        
74527>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74527>>>>>>>        // This error would otherwise be raised when we have an older
74527>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74527>>>>>>>        Send Ignore_error to Error_object_Id 20491
74528>>>>>>>        Get psDriverID to sDriverID
74529>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74530>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74535>>>>>>>        Send Trap_Error to Error_object_Id 20491
74536>>>>>>>        If (Trim(sVersion) = "") Begin
74538>>>>>>>            // Unable to get the revision. return all zeroes.
74538>>>>>>>            Move "0.0.0" to sVersion
74539>>>>>>>        End
74539>>>>>>>>
74539>>>>>>>        Function_Return sVersion
74540>>>>>>>    End_Function
74541>>>>>>>    
74541>>>>>>>End_Class
74542>>>>>>>
74542>>>>>>>
74542>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 20.1\Pkg\MSSqldrv.pkg)
74542>>>>>>>//     Package that declares MS SQL driver constants and functions.
74542>>>>>>>//     This package can be used by developers who want to add Data Access
74542>>>>>>>//     MS SQL Client specific code to a DataFlex application.
74542>>>>>>>
74542>>>>>>>Use Cli.pkg
74542>>>>>>>Use SQL.pkg
74542>>>>>>>
74542>>>>>>>//   Driver Indentification
74542>>>>>>>
74542>>>>>>>//   Error number constants
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>// SQL Server spcific types.
74542>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
74542>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
74542>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
74542>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
74542>>>>>>>
74542>>>>>>>// SQL Server spcific types.
74542>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
74542>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
74542>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
74542>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
74542>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
74542>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
74542>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
74542>>>>>>>//
74542>>>>>>>//     Setup a constraint for a file.
74542>>>>>>>
74542>>>>>>>
74542>>>>>>>Class cMSSQLHandler is a cCLIHandler
74543>>>>>>>    
74543>>>>>>>    Procedure Construct_Object
74545>>>>>>>        Forward Send Construct_Object
74547>>>>>>>        
74547>>>>>>>        Set psDriverID to MSSQLDRV_ID
74548>>>>>>>    End_Procedure
74549>>>>>>>    
74549>>>>>>>    
74549>>>>>>>    
74549>>>>>>>    //   Extract the list from the out connect string.
74549>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
74551>>>>>>>        String  sItem
74551>>>>>>>        Integer iStart
74551>>>>>>>        Integer iEnd
74551>>>>>>>        
74551>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
74554>>>>>>>        
74554>>>>>>>        Send Delete_Data to hoStore
74555>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
74556>>>>>>>        While (iStart > 0)
74560>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
74561>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
74564>>>>>>>            Else Begin
74565>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
74566>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
74567>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
74570>>>>>>>                
74570>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
74573>>>>>>>                
74573>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
74576>>>>>>>            End
74576>>>>>>>>
74576>>>>>>>        Loop
74577>>>>>>>>
74577>>>>>>>        
74577>>>>>>>        Function_Return (Item_Count(hoStore))
74578>>>>>>>    End_Procedure
74579>>>>>>>    
74579>>>>>>>    
74579>>>>>>>    
74579>>>>>>>    //   Call the driver's browse connect function
74579>>>>>>>    Function BrowseConnect String sInConnStr Returns String
74581>>>>>>>        String  sDriver
74581>>>>>>>        String  sOutConnStr
74581>>>>>>>        Integer iArg
74581>>>>>>>        Integer iRetval
74581>>>>>>>        
74581>>>>>>>        Get psDriverID to sDriver
74582>>>>>>>        If (sDriver <> "") Begin
74584>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
74585>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
74590>>>>>>>        End
74590>>>>>>>>
74590>>>>>>>        
74590>>>>>>>        Function_Return sOutConnStr
74591>>>>>>>    End_Function// BrowseConnect
74592>>>>>>>    
74592>>>>>>>    
74592>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
74594>>>>>>>        String  sDriver
74594>>>>>>>        String  sOutConnStr
74594>>>>>>>        Integer iArg
74594>>>>>>>        Integer iRetval
74594>>>>>>>        
74594>>>>>>>        Move 1 to iArg // Browses only local
74595>>>>>>>        
74595>>>>>>>        Get psDriverID to sDriver
74596>>>>>>>        If (sDriver <> "") Begin
74598>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
74599>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
74604>>>>>>>        End
74604>>>>>>>>
74604>>>>>>>        
74604>>>>>>>        Function_Return sOutConnStr
74605>>>>>>>    End_Function// BrowseConnect
74606>>>>>>>    
74606>>>>>>>    
74606>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
74608>>>>>>>        
74608>>>>>>>        String  sServerList
74608>>>>>>>        Integer iNumServers
74608>>>>>>>        Integer iDriver
74608>>>>>>>        Integer iClientVersion
74608>>>>>>>        String  sDriver
74608>>>>>>>        
74608>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
74609>>>>>>>        
74609>>>>>>>        If (iDriver) Begin
74611>>>>>>>            
74611>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
74614>>>>>>>            
74614>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
74615>>>>>>>            
74615>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
74616>>>>>>>            If (iNetworkLocal = 0) Begin
74618>>>>>>>                Get BrowseConnect sDriver to sServerList
74619>>>>>>>            End
74619>>>>>>>>
74619>>>>>>>            Else Begin
74620>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
74621>>>>>>>            End
74621>>>>>>>>
74621>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
74622>>>>>>>        End
74622>>>>>>>>
74622>>>>>>>        
74622>>>>>>>        Function_Return iNumServers
74623>>>>>>>        
74623>>>>>>>    End_Function
74624>>>>>>>    
74624>>>>>>>    //   Enumerate the available SQL Server database servers
74624>>>>>>>    //   This function will return all SQL Server instances on the network.
74624>>>>>>>    //   This may take a long time.
74624>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
74624>>>>>>>    Function EnumerateServers Returns Integer
74626>>>>>>>        
74626>>>>>>>        Integer iNumServers
74626>>>>>>>        Integer iNetworkLocal
74626>>>>>>>        
74626>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
74627>>>>>>>        
74627>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
74628>>>>>>>        
74628>>>>>>>        Function_Return iNumServers
74629>>>>>>>        
74629>>>>>>>    End_Function
74630>>>>>>>    
74630>>>>>>>    
74630>>>>>>>    //   Enumerate the available SQL Server database servers
74630>>>>>>>    //   This function will return only return SQL Server instance on the local machine
74630>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
74630>>>>>>>    Function EnumerateServersLocal Returns Integer
74632>>>>>>>        
74632>>>>>>>        Integer iNumServers
74632>>>>>>>        Integer iNetworkLocal
74632>>>>>>>        
74632>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
74633>>>>>>>        
74633>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
74634>>>>>>>        
74634>>>>>>>        Function_Return iNumServers
74635>>>>>>>        
74635>>>>>>>    End_Function
74636>>>>>>>    
74636>>>>>>>    
74636>>>>>>>    
74636>>>>>>>    //   Enumerate database in a given server.
74636>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
74638>>>>>>>        Integer hoSQL
74638>>>>>>>        String  sConnect
74638>>>>>>>        String  sDatabase
74638>>>>>>>        Integer hdbc
74638>>>>>>>        Integer hstmt
74638>>>>>>>        Integer iFetchResult
74638>>>>>>>        
74638>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
74641>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
74644>>>>>>>        
74644>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
74647>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
74649>>>>>>>        
74649>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
74651>>>>>>>            Move Current_Object to hoSQL
74652>>>>>>>        End_Object
74653>>>>>>>        
74653>>>>>>>        If (hoSQL <> 0) Begin
74655>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
74656>>>>>>>            If (hdbc <> 0) Begin
74658>>>>>>>                Get SQLOpen of hdbc to hstmt
74659>>>>>>>                If (hstmt <> 0) Begin
74661>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
74661>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
74661>>>>>>>                    //   approach in case meta data might change, the stored procedure will
74661>>>>>>>                    //   stay the same.
74661>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
74662>>>>>>>                    Send SQLCall to hstmt
74663>>>>>>>                    Repeat
74663>>>>>>>>
74663>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
74664>>>>>>>                        If (iFetchResult <> 0) Begin
74666>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
74667>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
74668>>>>>>>                        End
74668>>>>>>>>
74668>>>>>>>                    Until (iFetchResult = 0)
74670>>>>>>>                    
74670>>>>>>>                    Send SQLClose to hstmt
74671>>>>>>>                End
74671>>>>>>>>
74671>>>>>>>                Send SQLDisconnect to hdbc
74672>>>>>>>            End
74672>>>>>>>>
74672>>>>>>>        End
74672>>>>>>>>
74672>>>>>>>        Send Destroy_Object to hoSQL
74673>>>>>>>        
74673>>>>>>>        Function_Return (Item_Count(Current_Object))
74674>>>>>>>    End_Function
74675>>>>>>>    
74675>>>>>>>    
74675>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
74677>>>>>>>        
74677>>>>>>>        String  sSqlServerClientVersionName
74677>>>>>>>        
74677>>>>>>>        
74677>>>>>>>        Case Begin
74677>>>>>>>            
74677>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
74679>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
74680>>>>>>>                Case Break
74681>>>>>>>                
74681>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
74684>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
74685>>>>>>>                Case Break
74686>>>>>>>            
74686>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
74689>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
74690>>>>>>>                Case Break
74691>>>>>>>            
74691>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
74694>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
74695>>>>>>>                Case Break
74696>>>>>>>            
74696>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
74699>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
74700>>>>>>>                Case Break
74701>>>>>>>            
74701>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
74704>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
74705>>>>>>>                Case Break
74706>>>>>>>            
74706>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
74709>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
74710>>>>>>>                Case Break
74711>>>>>>>            
74711>>>>>>>            Case Else
74711>>>>>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
74712>>>>>>>                
74712>>>>>>>        Case End
74712>>>>>>>        
74712>>>>>>>        
74712>>>>>>>        Function_Return sSqlServerClientVersionName
74713>>>>>>>        
74713>>>>>>>    End_Function
74714>>>>>>>
74714>>>>>>>
74714>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
74716>>>>>>>        
74716>>>>>>>        String  sSqlServerClientDriverName
74716>>>>>>>        
74716>>>>>>>        Case Begin
74716>>>>>>>            
74716>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
74718>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
74719>>>>>>>                Case Break
74720>>>>>>>                
74720>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
74723>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
74724>>>>>>>                Case Break
74725>>>>>>>            
74725>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
74728>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
74729>>>>>>>                Case Break
74730>>>>>>>            
74730>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
74733>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
74734>>>>>>>                Case Break
74735>>>>>>>            
74735>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
74738>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
74739>>>>>>>                Case Break
74740>>>>>>>            
74740>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
74743>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
74744>>>>>>>                Case Break
74745>>>>>>>            
74745>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
74748>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
74749>>>>>>>                Case Break
74750>>>>>>>            
74750>>>>>>>            Case Else
74750>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
74751>>>>>>>                
74751>>>>>>>        Case End
74751>>>>>>>        
74751>>>>>>>        
74751>>>>>>>        Function_Return sSqlServerClientDriverName
74752>>>>>>>        
74752>>>>>>>    End_Function
74753>>>>>>>    
74753>>>>>>>    
74753>>>>>>>End_Class
74754>>>>>>>
74754>>>>>>>
74754>>>>>
74754>>>>>Register_Function phoWorkspace Returns Handle
74754>>>>>Register_Function Help_filename Returns String
74754>>>>>Register_Function GetHelpFile Returns String
74754>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
74754>>>>>
74754>>>>>// Do not call directly, use the wrapper function instead
74754>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
74755>>>>>
74755>>>>>// Wrapper Function WNetGetUser
74755>>>>>Function WNetGetUser Global ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
74757>>>>>    
74757>>>>>    DWord   dwResult     
74757>>>>>    UWide   uwName uwUserName
74757>>>>>    UWide   uwName uwUserName
74757>>>>>        
74757>>>>>    Send StringToWide lpName (&uwName)
74758>>>>>    
74758>>>>>    Send WideSetBuffer lpUser_Name lpLength (&uwUserName)    
74759>>>>>    
74759>>>>>    Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
74760>>>>>    
74760>>>>>    Send WideToString (&uwUserName) lpUser_Name
74761>>>>>    
74761>>>>>    Function_Return dwResult
74762>>>>>End_Function
74763>>>>>
74763>>>>>//    This function reads the current username Of windows and returns that
74763>>>>>//    name or an text unknown user
74763>>>>>Function Network_User_Name for cDesktop Returns String
74765>>>>>    WString wName
74765>>>>>    Integer iRetval iLength
74765>>>>>    
74765>>>>>    Move 0 to iLength
74766>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
74767>>>>>    Move (ZeroString(iLength)) to wName
74768>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
74769>>>>>    
74769>>>>>    If (iRetval = NO_ERROR) Begin
74771>>>>>        Function_Return (CString (wName))
74772>>>>>    End
74772>>>>>>
74772>>>>>    
74772>>>>>    Function_Return "User Unknown"
74773>>>>>End_Function
74774>>>>>
74774>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
74775>>>>>
74775>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
74776>>>>>
74776>>>>>Class SysinfoDisplay is a cTextEdit
74777>>>>>    Procedure Construct_Object
74779>>>>>        Forward Send Construct_Object
74781>>>>>        
74781>>>>>        Set Location to 6 6
74782>>>>>        Set Size to 110 255
74783>>>>>        Set Read_Only_State to True
74784>>>>>        Set pbWrap to False
74785>>>>>    End_Procedure
74786>>>>>    
74786>>>>>    //    This method will show the name Of the current directory in the system
74786>>>>>    //    information box
74786>>>>>    Procedure Show_Current_Directory
74788>>>>>        String sDir
74788>>>>>        
74788>>>>>        Get_Current_Directory to sDir
74789>>>>>        
74789>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
74790>>>>>    End_Procedure
74791>>>>>    
74791>>>>>    Procedure Show_Windows_Directory
74793>>>>>        String sWindir
74793>>>>>        
74793>>>>>        Get_Windows_Directory to sWindir
74794>>>>>        
74794>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
74795>>>>>    End_Procedure
74796>>>>>    
74796>>>>>    Procedure Show_Current_User
74798>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
74799>>>>>    End_Procedure
74800>>>>>    
74800>>>>>    Procedure Show_Number_Format
74802>>>>>        Integer iFormat
74802>>>>>        String sFormatText
74802>>>>>        
74802>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
74805>>>>>        Move (Character (iFormat)) to sFormatText
74806>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
74807>>>>>        
74807>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
74810>>>>>        Move (Character (iFormat)) to sFormatText
74811>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
74812>>>>>    End_Procedure
74813>>>>>    
74813>>>>>    Procedure Show_Filelist_Name
74815>>>>>        String sFilename
74815>>>>>        
74815>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
74818>>>>>        
74818>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
74819>>>>>        Send AppendTextLn ""
74820>>>>>    End_Procedure
74821>>>>>    
74821>>>>>    Procedure Show_Lock_Delay
74823>>>>>        Integer iLockdelay
74823>>>>>        
74823>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
74826>>>>>        
74826>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
74827>>>>>    End_Procedure
74828>>>>>    
74828>>>>>    Procedure Show_Lock_Timeout
74830>>>>>        Integer iLockTimeout
74830>>>>>        
74830>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
74833>>>>>        
74833>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
74834>>>>>    End_Procedure
74835>>>>>    
74835>>>>>    Procedure Show_Screen_Size
74837>>>>>        Integer iYscreensize iXscreensize
74837>>>>>        
74837>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
74838>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
74839>>>>>        
74839>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
74840>>>>>    End_Procedure
74841>>>>>    
74841>>>>>    Procedure Show_Page_Size
74843>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
74844>>>>>    End_Procedure
74845>>>>>    
74845>>>>>    Procedure Show_Date
74847>>>>>        Date dToday
74847>>>>>        
74847>>>>>        Move (CurrentDateTime()) to  dToday
74848>>>>>        
74848>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
74849>>>>>    End_Procedure
74850>>>>>    
74850>>>>>    Procedure Show_Date_Format
74852>>>>>        Integer iDateFormat
74852>>>>>        String sDateFormat
74852>>>>>        
74852>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
74855>>>>>        Case Begin
74855>>>>>            Case (iDateFormat = DF_DATE_USA)
74857>>>>>                Move C_$USA to sDateFormat
74858>>>>>                Case Break
74859>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
74862>>>>>                Move C_$European to sDateFormat
74863>>>>>                Case Break
74864>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
74867>>>>>                Move C_$Military to sDateFormat
74868>>>>>                Case Break
74869>>>>>            Case Else
74869>>>>>                Move C_$UnknownDateType to sDateFormat
74870>>>>>                Case Break
74871>>>>>        Case End
74871>>>>>        
74871>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
74872>>>>>    End_Procedure
74873>>>>>    
74873>>>>>    Procedure Show_Systemresources
74875>>>>>        tWinMemoryStatusEx MemoryStatusInfo
74875>>>>>        tWinMemoryStatusEx MemoryStatusInfo
74875>>>>>        Integer iRetval
74875>>>>>        
74875>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
74876>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
74877>>>>>        If (iRetval = 0) Begin
74879>>>>>            Move (ShowLastError ()) to iRetval
74880>>>>>        End
74880>>>>>>
74880>>>>>        
74880>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
74881>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
74882>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
74883>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
74884>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
74885>>>>>    End_Procedure
74886>>>>>    
74886>>>>>    Procedure Show_Registration
74888>>>>>        String sRegName
74888>>>>>        Integer iSN iMaxUsers
74888>>>>>        
74888>>>>>        Registration sRegName iSN
74889>>>>>>
74889>>>>>        
74889>>>>>        Get_Licensed_Max_Users to iMaxUsers
74890>>>>>        
74890>>>>>        Send AppendTextLn ""
74891>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
74892>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
74893>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
74894>>>>>    End_Procedure
74895>>>>>    
74895>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
74895>>>>>    // To the workspace object passing the an object and message To send back
74895>>>>>    // To this object. It is expected that the workspace object will send this
74895>>>>>    // message for every line Of information it wants displayed (passing the
74895>>>>>    // information To be displayed
74895>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
74895>>>>>    
74895>>>>>    Procedure Show_ServicePack
74897>>>>>        String sKey sVersionDescription sVersion
74897>>>>>        Handle hoRegistry
74897>>>>>        Boolean bExists bOpened
74897>>>>>        
74897>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
74898>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
74899>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
74900>>>>>        
74900>>>>>        Move C_DFVersionRegistryRoot to sKey
74901>>>>>        Get KeyExists of hoRegistry sKey to bExists
74902>>>>>        If (bExists) Begin
74904>>>>>            Get OpenKey of hoRegistry sKey to bOpened
74905>>>>>            If (bOpened) Begin
74907>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
74908>>>>>                If (bExists) Begin
74910>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
74911>>>>>                End
74911>>>>>>
74911>>>>>                
74911>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
74912>>>>>                If (bExists) Begin
74914>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
74915>>>>>                End
74915>>>>>>
74915>>>>>                Send CloseKey of hoRegistry
74916>>>>>            End
74916>>>>>>
74916>>>>>        End
74916>>>>>>
74916>>>>>        Send Destroy of hoRegistry
74917>>>>>        
74917>>>>>        If (sVersionDescription <> "") Begin
74919>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
74920>>>>>            Send AppendTextLn ""
74921>>>>>        End
74921>>>>>>
74921>>>>>    End_Procedure
74922>>>>>    
74922>>>>>    
74922>>>>>    Procedure Show_WorkspaceInformation
74924>>>>>        Integer hoWorkspace
74924>>>>>        
74924>>>>>        If (ghoApplication <> 0) Begin
74926>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
74927>>>>>            If (hoWorkspace <> 0) Begin
74929>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
74930>>>>>                Send AppendTextLn ""
74931>>>>>            End
74931>>>>>>
74931>>>>>        End
74931>>>>>>
74931>>>>>    End_Procedure
74932>>>>>    
74932>>>>>    // If connection ids are used, we will send the message EnumerateConnections
74932>>>>>    // to the connection manager object passing the an object and message to send
74932>>>>>    // back to this object. It is expected that the connection manager object will
74932>>>>>    // send this message for every line Of information it wants displayed (passing
74932>>>>>    // the information To be displayed
74932>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
74932>>>>>    
74932>>>>>    Procedure Show_ConnectionIdInformation
74934>>>>>        If (ghoConnection > 0) Begin
74936>>>>>            Send AppendTextLn ""
74937>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
74938>>>>>        End
74938>>>>>>
74938>>>>>    End_Procedure
74939>>>>>    
74939>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
74941>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
74942>>>>>    End_Function
74943>>>>>    
74943>>>>>    Procedure Show_Versions
74945>>>>>        Integer iVersion iRevision iBuild
74945>>>>>        
74945>>>>>        Version_Information iVersion iRevision iBuild
74947>>>>>        
74947>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
74948>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
74949>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
74950>>>>>    End_Procedure
74951>>>>>    
74951>>>>>    Procedure Show_Platform
74953>>>>>        Send AppendTextLn (SFormat (C_$Platform,"64-bit"))
74954>>>>>    End_Procedure
74955>>>>>    
74955>>>>>    Function CKRevisionNumber String sDriverID Returns String
74957>>>>>        Handle hoCLIHandler
74957>>>>>        Handle hoDFBtrDrvHandler
74957>>>>>        String sCKRevision
74957>>>>>        
74957>>>>>        
74957>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
74959>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
74960>>>>>            Set psDriverID of hoCLIHandler to sDriverID
74961>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
74962>>>>>            Send Destroy of hoCLIHandler
74963>>>>>        End
74963>>>>>>
74963>>>>>        Else Begin
74964>>>>>            If (sDriverID = "DFBTRDRV") Begin
74966>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
74967>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
74968>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
74969>>>>>                Send Destroy of hoDFBtrDrvHandler
74970>>>>>            End
74970>>>>>>
74970>>>>>        End
74970>>>>>>
74970>>>>>        
74970>>>>>        Function_Return sCKRevision
74971>>>>>    End_Function
74972>>>>>    
74972>>>>>    
74972>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
74974>>>>>        
74974>>>>>        If (sDriverID = "DATAFLEX") Begin
74976>>>>>            Function_Return False
74977>>>>>        End
74977>>>>>>
74977>>>>>        
74977>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
74978>>>>>    End_Function
74979>>>>>    
74979>>>>>    
74979>>>>>    Procedure Show_Drivers
74981>>>>>        String sCurrentDriver sRevNumber
74981>>>>>        String sLoadedDrivers sClientDriver
74981>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
74981>>>>>        Boolean bOK
74981>>>>>        Handle hoMsqlDrv
74981>>>>>        
74981>>>>>        Move "" to sLoadedDrivers
74982>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
74985>>>>>        For iCount from 1 to iNumberOfDrivers
74991>>>>>>
74991>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
74994>>>>>            If (sLoadedDrivers <> "") Begin
74996>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
74997>>>>>            End
74997>>>>>>
74997>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
74998>>>>>            If (bOK) Begin
75000>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
75002>>>>>                    Move iCount to iMSSQLIndex
75003>>>>>                End
75003>>>>>>
75003>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
75004>>>>>                // if mssqldrv, show the client number
75004>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
75005>>>>>            End
75005>>>>>>
75005>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
75006>>>>>        Loop
75007>>>>>>
75007>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
75008>>>>>        If (iMSSQLIndex>0) Begin
75010>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
75013>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
75014>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
75015>>>>>            Send Destroy of hoMsqlDrv
75016>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
75017>>>>>        End
75017>>>>>>
75017>>>>>    End_Procedure
75018>>>>>    
75018>>>>>    Procedure Show_HelpFile
75020>>>>>        String sHelpFile
75020>>>>>        Integer eHelpType
75020>>>>>        
75020>>>>>        If (ghoApplication <> 0) Begin
75022>>>>>            Get peHelpType of ghoApplication to eHelpType
75023>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
75025>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
75026>>>>>            End
75026>>>>>>
75026>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
75029>>>>>                Get Help_filename of Help_object_id to sHelpFile
75030>>>>>            End
75030>>>>>>
75030>>>>>            Else Begin
75031>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
75032>>>>>            End
75032>>>>>>
75032>>>>>            
75032>>>>>            Send AppendTextLn ""
75033>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
75034>>>>>        End
75034>>>>>>
75034>>>>>    End_Procedure
75035>>>>>    
75035>>>>>    Procedure Show_EnterAsTab
75037>>>>>        Boolean bEnterKeyAsTabKey
75037>>>>>        String sText
75037>>>>>        
75037>>>>>        If (ghoApplication <> 0) Begin
75039>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
75040>>>>>            If (bEnterKeyAsTabKey) Begin
75042>>>>>                Move "True" to sText
75043>>>>>            End
75043>>>>>>
75043>>>>>            Else Begin
75044>>>>>                Move "False" to sText
75045>>>>>            End
75045>>>>>>
75045>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
75046>>>>>        End
75046>>>>>>
75046>>>>>    End_Procedure
75047>>>>>    
75047>>>>>    //    During activation we will remove the old information and add the newly
75047>>>>>    //    found systeminformation
75047>>>>>    Procedure Add_Focus Integer hoRoot
75049>>>>>        Forward Send Add_Focus hoRoot
75051>>>>>        
75051>>>>>        Send Delete_Data
75052>>>>>        
75052>>>>>        Set Changed_State to False
75053>>>>>        Set Read_Only_State to True
75054>>>>>        
75054>>>>>        Send Show_ServicePack
75055>>>>>        Send Show_Versions
75056>>>>>        Send Show_Platform
75057>>>>>        Send Show_Drivers
75058>>>>>        If (ghoConnection <> 0) Begin
75060>>>>>            Send Show_ConnectionIdInformation
75061>>>>>        End
75061>>>>>>
75061>>>>>        Send Show_HelpFile
75062>>>>>        Send Show_Current_Directory
75063>>>>>        Send Show_Filelist_Name
75064>>>>>        If (ghoApplication <> 0) Begin
75066>>>>>            Send Show_WorkSpaceInformation // added To show WS info
75067>>>>>        End
75067>>>>>>
75067>>>>>        Send Show_Current_User
75068>>>>>        Send Show_Windows_Directory
75069>>>>>        Send Show_Screen_Size
75070>>>>>        Send Show_Page_Size
75071>>>>>        Send Show_EnterAsTab
75072>>>>>        Send Show_Number_Format
75073>>>>>        Send Show_Date_Format
75074>>>>>        Send Show_Lock_Delay
75075>>>>>        Send Show_Lock_Timeout
75076>>>>>        Send Show_Date
75077>>>>>        Send Show_Systemresources
75078>>>>>        Send Show_Registration
75079>>>>>        Send Beginning_of_Data
75080>>>>>        
75080>>>>>        Set Icon to 'default.ico'
75081>>>>>    End_Procedure
75082>>>>>End_Class
75083>>>>>
75083>>>>>Class SysInfoDialog is a ModalPanel
75084>>>>>    Procedure Construct_Object
75086>>>>>        Forward Send Construct_Object
75088>>>>>        
75088>>>>>        Set Label to C_$SystemInformation
75089>>>>>        Set Size to 140 267
75090>>>>>        Set piMinSize to 140 267
75091>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
75092>>>>>        Set Border_Style to Border_Thick
75093>>>>>        
75093>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
75095>>>>>            Set peAnchors to anAll
75096>>>>>        End_Object
75097>>>>>        
75097>>>>>        Object oCloseButton is a Button
75099>>>>>            Set Label to C_$Close
75100>>>>>            Set Location to 120 210
75101>>>>>            Set Message 0 to (Refproc (Close_Panel))
75102>>>>>            Set Default_State to True
75103>>>>>            Set peAnchors to anBottomRight
75104>>>>>        End_Object
75105>>>>>        
75105>>>>>        On_Key kCancel Send Close_Panel
75106>>>>>    End_Procedure
75107>>>>>End_Class
75108>>>>>
75108>>>>>Class AboutDialog is a ModalPanel
75109>>>>>    Procedure Construct_Object
75111>>>>>        String sVdfRootDir
75111>>>>>        
75111>>>>>        Forward Send Construct_Object
75113>>>>>        
75113>>>>>        Set Label to C_$About
75114>>>>>        Set Size to 89 282
75115>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
75116>>>>>        
75116>>>>>        Object oSysInfoDialog is a SysInfoDialog
75118>>>>>        End_Object
75119>>>>>        
75119>>>>>        Object oBox is a Container3d
75121>>>>>            Set Border_Style to Border_StaticEdge
75122>>>>>            Set Size to 63 272
75123>>>>>            Set Location to 4 5
75124>>>>>            
75124>>>>>            Object oAboutGraphic is a BitmapContainer
75126>>>>>                Set Border_Style to Border_None
75127>>>>>                Set Bitmap_Style to Bitmap_Center
75128>>>>>                Set Size to 48 48
75129>>>>>                Set Location to 7 2
75130>>>>>            End_Object
75131>>>>>            
75131>>>>>            Object oProductName is a TextBox
75133>>>>>                Set Label to C_$ProductName
75134>>>>>                Set Size to 10 45
75135>>>>>                Set Location to 8 53
75136>>>>>            End_Object
75137>>>>>            
75137>>>>>            Object oVersion is a TextBox
75139>>>>>                Set Label to C_$Version
75140>>>>>                Set Size to 10 25
75141>>>>>                Set Location to 21 53
75142>>>>>            End_Object
75143>>>>>            
75143>>>>>            Object oCopyright is a TextBox
75145>>>>>                Set Label to C_$Copyright
75146>>>>>                Set Size to 10 31
75147>>>>>                Set Location to 34 53
75148>>>>>            End_Object
75149>>>>>            
75149>>>>>            Object oAuthor is a TextBox
75151>>>>>                Set Label to C_$Author
75152>>>>>                Set Size to 10 22
75153>>>>>                Set Location to 46 53
75154>>>>>            End_Object
75155>>>>>        End_Object
75156>>>>>        
75156>>>>>        Object oOKButton is a Button
75158>>>>>            On_Item C_$OK Send Close_Panel
75159>>>>>            Set Size to 14 50
75160>>>>>            Set Location to 71 227
75161>>>>>        End_Object
75162>>>>>        
75162>>>>>        Object oSysInfoButton is a Button
75164>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
75165>>>>>            Set Size to 14 50
75166>>>>>            Set Location to 71 171
75167>>>>>        End_Object
75168>>>>>        
75168>>>>>        On_Key Kcancel Send KeyAction of oOKButton
75169>>>>>        
75169>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
75170>>>>>    End_Procedure
75171>>>>>    
75171>>>>>    Procedure Set ProductName String sProductName
75173>>>>>        Set Label of oProductName to sProductName
75174>>>>>    End_Procedure
75175>>>>>    
75175>>>>>    Procedure Set Version String sVersion
75177>>>>>        Set Label of oVersion to sVersion
75178>>>>>    End_Procedure
75179>>>>>    
75179>>>>>    Procedure Set Copyright String sCopyright
75181>>>>>        Set Label of oCopyright to sCopyright
75182>>>>>    End_Procedure
75183>>>>>    
75183>>>>>    Procedure Set Author String sAuthor
75185>>>>>        Set Label of oAuthor to sAuthor
75186>>>>>    End_Procedure
75187>>>>>    
75187>>>>>    Procedure Set Logo String sLogo
75189>>>>>        // square bitmaps Of 42x42 work best
75189>>>>>        Set Bitmap of oAboutGraphic to sLogo
75190>>>>>    End_Procedure
75191>>>>>    
75191>>>>>    Procedure Show_Sysinfo
75193>>>>>        Send Popup_Modal of oSysinfoDialog
75194>>>>>    End_Procedure
75195>>>>>    
75195>>>>>    Procedure End_Construct_Object
75197>>>>>        Handle hoVersionInfo
75197>>>>>        Boolean bIncluded
75197>>>>>        Integer iMajor iMinor iRelease iBuild
75197>>>>>        String sLabel
75197>>>>>        
75197>>>>>        Get Label of oVersion to sLabel
75198>>>>>        If (sLabel = C_$VERSION) Begin
75200>>>>>            // set it To the version info Of the program, if available
75200>>>>>            If (ghoApplication <> 0) Begin
75202>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
75203>>>>>                If (hoVersionInfo <> 0) Begin
75205>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
75206>>>>>                    If (bIncluded) Begin
75208>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
75209>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
75210>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
75211>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
75212>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
75213>>>>>                        Set Version to sLabel
75214>>>>>                    End
75214>>>>>>
75214>>>>>                End
75214>>>>>>
75214>>>>>            End
75214>>>>>>
75214>>>>>        End
75214>>>>>>
75214>>>>>        
75214>>>>>        Forward Send End_Construct_Object
75216>>>>>    End_Procedure
75217>>>>>End_Class
75218>>>
75218>>>//  This is the default message. It is expected that you will
75218>>>//  create your own message to override this
75218>>>Procedure Activate_About
75221>>>    Send DoAbout "" "" "" "" ""
75222>>>End_Procedure
75223>>>
75223>>>//  It is expected that you will send this message (most
75223>>>//  likely from Activate_About. This creates an about object, activates it
75223>>>//  and destroys it when done. It is not exepected that you will augment this.
75223>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
75226>>>    Integer hoObj hoMain
75226>>>    
75226>>>    // create object
75226>>>    Object About is an AboutDialog
75228>>>        // if no title passed use the label of the main panel
75228>>>        // (if a main panel exists).
75228>>>        If (sTitle = "") Begin
75230>>>            Get Main_Window of desktop to hoMain
75231>>>            If hoMain ;                Get Label of hoMain to sTitle
75234>>>        End
75234>>>>
75234>>>        Set productname to sTitle
75235>>>        Set version     to sVersion
75236>>>        Set copyright   to sCopyRight
75237>>>        Set author      to sAuthor
75238>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
75241>>>        Move Self to hoObj // object Id
75242>>>    End_Object
75243>>>    Send Popup   of hoObj    // popup the about object
75244>>>    Send Destroy of hoObj // when done, it will be destroyed
75245>>>End_Procedure
75246>>>
75246>        Use People.vw
Including file: People.vw    (C:\DataFlex Projects\Media\AppSrc\People.vw)
75246>>>// C:\DataFlex Projects\Media\AppSrc\People.vw
75246>>>// People
75246>>>//
75246>>>
75246>>>Use DFClient.pkg
75246>>>Use DFEntry.pkg
75246>>>Use DfTabDlg.pkg
75246>>>Use cDbTextEdit.pkg
75246>>>
75246>>>Use cPeopleDataDictionary.dd
Including file: cPeopleDataDictionary.dd    (C:\DataFlex Projects\Media\DDSrc\cPeopleDataDictionary.dd)
75246>>>>>Use DataDict.pkg
75246>>>>>
75246>>>>>Open People
Including file: People.fd    (C:\DataFlex Projects\Media\DDSrc\People.fd)
75248>>>>>Open Media
Including file: Media.fd    (C:\DataFlex Projects\Media\DDSrc\Media.fd)
75250>>>>>
75250>>>>>Class cPeopleDataDictionary is a DataDictionary
75251>>>>>    
75251>>>>>    Procedure Construct_Object
75253>>>>>        Forward Send Construct_Object
75255>>>>>        Set Main_File to People.File_Number
75256>>>>>
75256>>>>>        Set Add_Client_File to Media.File_Number
75257>>>>>
75257>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
75258>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
75259>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
75260>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
75261>>>>>
75261>>>>>        Set Key_Field_State Field People.PeopleId to True
75262>>>>>
75262>>>>>        Set Field_Option Field People.LastName DD_REQUIRED to True
75263>>>>>
75263>>>>>        Set Field_Option Field People.Zip DD_CAPSLOCK to True
75264>>>>>
75264>>>>>        Set Field_Option Field People.City DD_CAPSLOCK to True
75265>>>>>
75265>>>>>    End_Procedure
75266>>>>>
75266>>>>>End_Class
75267>>>
75267>>>ACTIVATE_VIEW Activate_oPeople FOR oPeople
75277>>>>
75277>>>Object oPeople is a dbView
75279>>>    Set Location to 5 5
75280>>>    Set Size to 189 303
75281>>>    Set Label To "People"
75282>>>    Set Border_Style to Border_Thick
75283>>>
75283>>>
75283>>>    Object oPeople_DD is a cPeopleDataDictionary
75285>>>    End_Object 
75286>>>
75286>>>    Set Main_DD To oPeople_DD
75287>>>    Set Server  To oPeople_DD
75288>>>
75288>>>
75288>>>
75288>>>    Object oPeoplePeopleId is a dbForm
75290>>>        Entry_Item People.PeopleId
75291>>>        Set Size to 12 42
75292>>>        Set Location to 5 39
75293>>>        Set peAnchors to anTopLeftRight
75294>>>        Set Label to "PeopleId"
75295>>>        Set Label_Justification_mode to jMode_right
75296>>>        Set Label_Col_Offset to 2
75297>>>        Set Label_row_Offset to 0
75298>>>    End_Object 
75299>>>
75299>>>    Object oPeopleLastName is a dbForm
75301>>>        Entry_Item People.LastName
75302>>>        Set Size to 12 246
75303>>>        Set Location to 19 39
75304>>>        Set peAnchors to anTopLeftRight
75305>>>        Set Label to "LastName"
75306>>>        Set Label_Justification_mode to jMode_right
75307>>>        Set Label_Col_Offset to 2
75308>>>        Set Label_row_Offset to 0
75309>>>    End_Object 
75310>>>
75310>>>    Object oPeopleFirstName is a dbForm
75312>>>        Entry_Item People.FirstName
75313>>>        Set Size to 12 186
75314>>>        Set Location to 33 39
75315>>>        Set peAnchors to anTopLeftRight
75316>>>        Set Label to "FirstName"
75317>>>        Set Label_Justification_mode to jMode_right
75318>>>        Set Label_Col_Offset to 2
75319>>>        Set Label_row_Offset to 0
75320>>>    End_Object 
75321>>>
75321>>>    Object oTabDialog is a dbTabDialog
75323>>>        Set Size to 129 293
75324>>>        Set Location to 55 5
75325>>>        Set peAnchors to anTopLeftRight
75326>>>
75326>>>        Object oTabPage1 is a dbTabPage
75328>>>            Set Label to "Address"
75329>>>
75329>>>            Object oPeopleAddress is a dbForm
75331>>>                Entry_Item People.Address
75332>>>                Set Size to 12 246
75333>>>                Set Location to 10 33
75334>>>                Set peAnchors to anTopLeftRight
75335>>>                Set Label to "Address"
75336>>>                Set Label_Justification_mode to jMode_right
75337>>>                Set Label_Col_Offset to 2
75338>>>                Set Label_row_Offset to 0
75339>>>            End_Object 
75340>>>
75340>>>            Object oPeopleZip is a dbForm
75342>>>                Entry_Item People.Zip
75343>>>                Set Size to 12 78
75344>>>                Set Location to 24 33
75345>>>                Set peAnchors to anTopLeftRight
75346>>>                Set Label to "Zip"
75347>>>                Set Label_Justification_mode to jMode_right
75348>>>                Set Label_Col_Offset to 2
75349>>>                Set Label_row_Offset to 0
75350>>>            End_Object 
75351>>>
75351>>>            Object oPeopleCity is a dbForm
75353>>>                Entry_Item People.City
75354>>>                Set Size to 12 250
75355>>>                Set Location to 38 33
75356>>>                Set peAnchors to anTopLeftRight
75357>>>                Set Label to "City"
75358>>>                Set Label_Justification_mode to jMode_right
75359>>>                Set Label_Col_Offset to 2
75360>>>                Set Label_row_Offset to 0
75361>>>            End_Object 
75362>>>
75362>>>        End_Object 
75363>>>
75363>>>        Object oTabPage2 is a dbTabPage
75365>>>            Set Label to "Other"
75366>>>
75366>>>            Object oPeoplePhone is a dbForm
75368>>>                Entry_Item People.Phone
75369>>>                Set Size to 12 156
75370>>>                Set Location to 10 38
75371>>>                Set peAnchors to anTopLeftRight
75372>>>                Set Label to "Phone"
75373>>>                Set Label_Justification_mode to jMode_right
75374>>>                Set Label_Col_Offset to 2
75375>>>                Set Label_row_Offset to 0
75376>>>            End_Object 
75377>>>
75377>>>            Object oPeopleComment is a cDbTextEdit
75379>>>                Entry_Item People.Comment
75380>>>                Set Size to 80 200
75381>>>                Set Location to 24 38
75382>>>                Set peAnchors to anTopLeftRight
75383>>>                Set Label to "Comment"
75384>>>                Set Label_Justification_mode to jMode_right
75385>>>                Set Label_Col_Offset to 2
75386>>>                Set Label_row_Offset to 0
75387>>>            End_Object 
75388>>>
75388>>>        End_Object 
75389>>>
75389>>>    End_Object 
75390>>>
75390>>>
75390>>>End_Object 
75391>        Use Media.vw
Including file: Media.vw    (C:\DataFlex Projects\Media\AppSrc\Media.vw)
75391>>>Use Windows.pkg
75391>>>Use DFClient.pkg
75391>>>Use cPeopleDataDictionary.dd
75391>>>Use cMediaDataDictionary.dd
Including file: cMediaDataDictionary.dd    (C:\DataFlex Projects\Media\DDSrc\cMediaDataDictionary.dd)
75391>>>>>Use DataDict.pkg
75391>>>>>
75391>>>>>Open Media
75393>>>>>Open People
75395>>>>>
75395>>>>>Object oMediaTypes is a DescriptionValidationTable
75397>>>>>    Set Allow_Blank_State to True
75398>>>>>    Procedure Fill_List
75401>>>>>        Forward Send Fill_List
75403>>>>>        Send Add_Table_Value "CD" "CD-Rom"
75404>>>>>        Send Add_Table_Value "DVD-M" "DVD Music"
75405>>>>>        Send Add_Table_Value "DVD-V" "DVD Video"
75406>>>>>        Send Add_Table_Value "BOOK" "Book"
75407>>>>>        Send Add_Table_Value "SW" "Software"
75408>>>>>        Send Add_Table_Value "OTHER" "Other"
75409>>>>>    End_Procedure
75410>>>>>End_Object
75411>>>>>
75411>>>>>Class cMediaDataDictionary is a DataDictionary
75412>>>>>    
75412>>>>>    Procedure Construct_Object
75414>>>>>        Forward Send Construct_Object
75416>>>>>        Set Main_File to Media.File_Number
75417>>>>>
75417>>>>>        Set Add_Server_File to People.File_Number
75418>>>>>
75418>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
75419>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
75420>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
75421>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
75422>>>>>
75422>>>>>        Set Key_Field_State Field Media.MediaID to True
75423>>>>>
75423>>>>>        Set Field_Option Field Media.Title DD_REQUIRED to True
75424>>>>>        Set Field_Option Field Media.Title DD_DISPLAYONLY to True
75425>>>>>
75425>>>>>        Set Field_Value_Table Field Media.Type to oMediaTypes
75426>>>>>
75426>>>>>    End_Procedure
75427>>>>>
75427>>>>>End_Class
75428>>>
75428>>>Deferred_View Activate_oMedia for ;Object oMedia is a dbView
75453>>>    Object oPeople_DD is a cPeopleDataDictionary
75455>>>    End_Object
75456>>>
75456>>>    Object oMedia_DD is a cMediaDataDictionary
75458>>>        Set DDO_Server to oPeople_DD
75459>>>    End_Object
75460>>>
75460>>>    Set Main_DD to oMedia_DD
75461>>>    Set Server to oMedia_DD
75462>>>
75462>>>    Set Border_Style to Border_Thick
75463>>>    Set Size to 200 300
75464>>>    Set Location to 2 15
75465>>>    Set Label to "Media"
75466>>>
75466>>>Cd_End_Object
75468>>>>
75468>
75468>        Procedure Activate_About
75471>            Send DoAbout "" "" "" "" ""
75472>        End_Procedure
75473>
75473>    End_Object
75474>
75474>End_Object
75475>
75475>Start_UI
75476>
Summary
Memory Available: 9186426880
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 43574
Total Resources: 0
Total Commands : 75475
Total Windows  : 0
Total Pages    : 0
Static Data    : 532035
Message area   : 526520
Total Blocks   : 28323
